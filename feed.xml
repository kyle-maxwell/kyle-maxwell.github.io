<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="http://localhost:4000/engineering/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/engineering/" rel="alternate" type="text/html" /><updated>2019-07-09T18:29:48-07:00</updated><id>http://localhost:4000/engineering/feed.xml</id><title type="html">GoDaddy Engineering Blog</title><subtitle>Information from our engineering team about the technology and tools we use to create software which empowers small businesses around the world to build and market their digital identities.
</subtitle><entry><title type="html">Asherah: An Application Encryption SDK</title><link href="http://localhost:4000/engineering/2019/07/09/asherah-opensource-app-encryption-sdk/" rel="alternate" type="text/html" title="Asherah: An Application Encryption SDK" /><published>2019-07-09T09:00:00-07:00</published><updated>2019-07-09T09:00:00-07:00</updated><id>http://localhost:4000/engineering/2019/07/09/asherah-opensource-app-encryption-sdk</id><content type="html" xml:base="http://localhost:4000/engineering/2019/07/09/asherah-opensource-app-encryption-sdk/">&lt;blockquote&gt;
  &lt;p&gt;“…Most Creation myths begin with a ‘paradoxical unity of everything, evaluated either as chaos or as Paradise,’ and the 
world as we know it does not really come into being until this is changed. I should point out here that Enki’s original name 
was En-Kur, Lord of Kur. Kur was a primeval ocean – Chaos – that Enki conquered.”&lt;/p&gt;

  &lt;p&gt;“Every hacker can identify with that.”&lt;/p&gt;

  &lt;p&gt;“But Asherah has similar connotations. Her name in Ugaritic, ‘atiratu yammi’ means ‘she who treads on (the) sea (dragon).’”&lt;/p&gt;

  &lt;p&gt;“Okay, so both Enki and Asherah were figures who had in some sense defeated chaos. And your point is that this defeat of 
chaos, the separation of the static, unified world into a binary system, is identified with creation.”&lt;/p&gt;

  &lt;p&gt;“Correct.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Ng mumbles something and a card appears in his hand. “Here’s a new version of the system software,” he says. “It should be a 
little less buggy.”&lt;/p&gt;

  &lt;p&gt;“A little less?”&lt;/p&gt;

  &lt;p&gt;“No piece of software is ever bug free,” Ng says.&lt;/p&gt;

  &lt;p&gt;Uncle Enzo says, “I guess there’s a little bit of Asherah in all of us.”&lt;/p&gt;

  &lt;p&gt;– &lt;cite&gt;Snow Crash&lt;/cite&gt;, Neal Stephenson&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Developers often write software that handles sensitive data like customer information. Best practice and company standards 
dictate that this data should be encrypted at multiple levels: at rest, in transit and at the application. Easy-to-use 
solutions exist for encryption at rest, like encrypted block stores, and for encryption in transit, like TLS, but writing 
solid code for application-level encryption is still challenging. Common problems to tackle include choosing a good 
cryptographic technique, generating keys and managing them properly, preventing memory scanning attacks and rotating keys. For 
example, if you encrypt everything with one key and it is compromised, rotating the key and decrypting-then-re-encrypting all 
of the data is expensive and time consuming.&lt;/p&gt;

&lt;p&gt;As we have made the transition to cloud native architectures and are well underway moving many services and applications
to AWS, we have continued to focus significant attention on always improving our security posture. We considered how we 
could address problems surrounding encryption, key rotation and blast radius reduction as a company rather than leaving
these comparatively difficult problems to each team to solve. As a result, we are delighted to present &lt;strong&gt;Asherah&lt;/strong&gt;: an 
easy-to-use SDK which abstracts away the complexity of advanced encryption techniques and risk mitigation at enterprise scale. 
&lt;strong&gt;Asherah&lt;/strong&gt; makes use of &lt;strong&gt;envelope encryption&lt;/strong&gt; and &lt;strong&gt;hierarchical keys&lt;/strong&gt;. In envelope encryption, the key used to encrypt a 
data element is itself encrypted by a separate, &lt;em&gt;higher order&lt;/em&gt; key and the encrypted key value is stored &lt;em&gt;with the data&lt;/em&gt;. 
These higher order keys form a hierarchy of keys that partition the key space and data, reducing the blast radius of a 
compromise and allowing for novel approaches to incremental rotation. &lt;strong&gt;Asherah&lt;/strong&gt; abstracts away the complexity of managing 
that system, letting developers interact with data and encryption/decryption in standard ways with familiar APIs while 
offering a very high level of protection against compromise and data loss. Like alternative libraries such as
&lt;a href=&quot;https://github.com/google/tink&quot;&gt;Google’s Tink&lt;/a&gt;, we are careful to provide only those encryption algorithms that are known
secure and initialize them in conformance with best practices. Our initially supported algorithm is AES256-GCM and we plan
to provide interfaces for adding others while supporting and including only those that are known to be safe to use. A more 
detailed explanation of how our goals contrast with other open source alternatives and why we chose to propose our own
SDK, see &lt;strong&gt;Related Work&lt;/strong&gt; below.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Asherah&lt;/strong&gt; is an incubator project and we are currently testing internally. In addition, we have a roadmap that includes 
plans to have third-party security audits of the code for every supported language. Our goal in open sourcing it is to 
invite the security community and the developer community at large to help us evaluate, test and iterate on this solution so 
that we can help developers manage private data more securely.&lt;/p&gt;

&lt;h2 id=&quot;using-asherah&quot;&gt;Using Asherah&lt;/h2&gt;

&lt;p&gt;We wanted to make it easy for developers to write code that manages customer data without being forced to implement 
important features like key rotation and hierarchical key structures from scratch. The API itself is easy to use.&lt;/p&gt;

&lt;h3 id=&quot;step-1-create-a-session-factory&quot;&gt;Step 1: Create a session factory&lt;/h3&gt;

&lt;p&gt;Each encryption context is wrapped in a new session that is produced from a factory method. The session contains details on
the particular keys from a key hierarchy that will be used, a caching policy, a key rotation policy and the configuration
of how performance metrics will be logged. A session is required for any encryption/decryption operations. For simplicity, 
the session factory uses the builder pattern, specifically a step builder. This ensures all required properties are set before 
a factory is built.&lt;/p&gt;

&lt;p&gt;To obtain an instance of the builder, use the static factory method &lt;code class=&quot;highlighter-rouge&quot;&gt;newBuilder&lt;/code&gt;. Once you have a builder, you can 
use the &lt;code class=&quot;highlighter-rouge&quot;&gt;with&amp;lt;property&amp;gt;&lt;/code&gt; setter methods to configure the session factory properties. Below is an example of a 
session factory that uses in-memory persistence and static key management.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;AppEncryptionSessionFactory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;appEncryptionSessionFactory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AppEncryptionSessionFactory&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;productId&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;systemId&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withMemoryPersistence&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withNeverExpiredCryptoPolicy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withStaticKeyManagementService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;secretmasterkey!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// hard-coded/static master key&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withMetricsEnabled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Outputs timing and performance metrics to a configured log handler&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We recommend that every service have its own session factory, preferably as a singleton instance within the 
service. This will allow you to leverage caching and minimize resource usage. Always remember to close the 
session factory before exiting the service to ensure that all resources held by the factory, including the 
cache, are disposed of properly.&lt;/p&gt;

&lt;h3 id=&quot;step-2-create-a-session&quot;&gt;Step 2: Create a session&lt;/h3&gt;

&lt;p&gt;Now that we have session factory, we need to create a session to be able to actually encrypt/decrypt any data. Use the factory 
created in step 1 to do this. The payload and data row record types can be specified while creating the session. These are 
currently restricted to JSON objects and byte arrays.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// The first parameter for AppEncryption is the payload type and the second is the DRR type&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;AppEncryption&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encryptionSessionBytes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;appEncryptionSessionFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAppEncryptionBytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;partitionId&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The scope of a session is limited to a partition id, which is used to partition the lowest order of keys Asherah
manages. As with the session factory, remember to close the session at the end of the transactions to dispose of all
the resources properly.&lt;/p&gt;

&lt;h3 id=&quot;step-3-use-the-session-to-accomplish-the-cryptographic-task&quot;&gt;Step 3: Use the session to accomplish the cryptographic task&lt;/h3&gt;

&lt;p&gt;We are now ready to use &lt;strong&gt;Asherah&lt;/strong&gt; to encrypt and decrypt data. &lt;strong&gt;Asherah&lt;/strong&gt; supports two usage patterns. We’ll use the 
simpler encrypt/decrypt pattern for the purpose of this post. For usage details of the advanced load/store 
pattern, &lt;a href=&quot;https://github.com/godaddy/asherah&quot;&gt;please check out our public repo on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Encrypt/Decrypt:&lt;/p&gt;

&lt;p&gt;This usage style is similar to common encryption utilities where payloads are simply encrypted and decrypted, and 
it is completely up to the calling application for storage responsibility.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;originalPayloadString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;mysupersecretpayload&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// encrypt the payload &lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataRowRecordBytes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encryptionSessionBytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;encrypt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;originalPayloadString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StandardCharsets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;UTF_8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// decrypt the payload &lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decryptedPayloadString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encryptionSessionBytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;decrypt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newBytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StandardCharsets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;UTF_8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;technical-details&quot;&gt;Technical details&lt;/h2&gt;

&lt;p&gt;Here is a diagram showing at a high level a typical encryption operation in &lt;strong&gt;Asherah&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/engineering/assets/images/asherah/first.png&quot; alt=&quot;Diagram 1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Features:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Easy incremental key rotation and blast radius reduction&lt;/strong&gt;: &lt;strong&gt;Asherah&lt;/strong&gt; generates cryptographically strong keys and 
arranges them in a hierarchy, enhancing the value provided by envelope encryption. The hierarchical key model also encourages 
frequent key rotation which limits the blast radius in case of a security breach. These key rotations happen automatically
as you encrypt and decrypt data according to the &lt;em&gt;crypto policy&lt;/em&gt; you use in your session. Behind the scenes, &lt;strong&gt;Asherah&lt;/strong&gt;
considers whether keys are revoked, stale or otherwise in need of rotation and decrypts and re-encrypts your data and
rotates your keys.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;User configurable key management service&lt;/strong&gt;: &lt;strong&gt;Asherah&lt;/strong&gt; can integrate with master key management services using a 
pluggable key management service interface, allowing it to be cloud agnostic or support on-premise implementations.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;User configurable datastore&lt;/strong&gt;: &lt;strong&gt;Asherah&lt;/strong&gt; manages generated data keys via a pluggable datastore, providing you with a
flexible architecture.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;In-memory key protection against a growing number of key hijacking attacks&lt;/strong&gt;: &lt;strong&gt;Asherah&lt;/strong&gt; takes advantage of our &lt;strong&gt;Secure 
Memory&lt;/strong&gt; library, which makes use of native calls and off-heap memory to secure keys. This protects against several memory 
investigation attacks such as scanning memory directly via proc, forcing a process to page to disk to recapture process memory 
and trigging a core dump. As we continue to implement new ways to protect memory and pair these with recommended system level 
settings (such as, on Linux, setting /proc/sys/kernel/yama/ptrace_scope to a restrictive value), the protections we add to 
this library give Asherah’s internal key caches greater resilience to attack.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As a developer, the three primary external resources you interact with are the &lt;code class=&quot;highlighter-rouge&quot;&gt;KeyManagementService&lt;/code&gt;, the &lt;code class=&quot;highlighter-rouge&quot;&gt;Metastore&lt;/code&gt; and the
&lt;code class=&quot;highlighter-rouge&quot;&gt;AppEncryptionSessionFactory&lt;/code&gt;. The &lt;code class=&quot;highlighter-rouge&quot;&gt;KeyManagementService&lt;/code&gt; is used to integrate with a service, typically a cloud provider’s 
core key management implementation, that manages the master key you use as the root for our hierarchical key model. The 
&lt;code class=&quot;highlighter-rouge&quot;&gt;Metastore&lt;/code&gt; is the backing datastore &lt;strong&gt;Asherah&lt;/strong&gt; used to manage the data keys it generates to construct the hierarchical 
model. Both of these interfaces follow a pluggable model so that &lt;strong&gt;Asherah&lt;/strong&gt; remains highly extensible for the diversity of 
use-cases that must be managed in enterprise scale environments. Finally, the &lt;code class=&quot;highlighter-rouge&quot;&gt;AppEncryptionSessionFactory&lt;/code&gt; is where you
initialize your encryption or decryption context. A helpful and configurable &lt;code class=&quot;highlighter-rouge&quot;&gt;CryptoPolicy&lt;/code&gt; is initialized in this conext and 
it wraps and manages the complexity of key rotation schedules and caching behavior, among other things. Future &lt;strong&gt;Asherah&lt;/strong&gt; 
features will primarily be exposed via the policy.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/engineering/assets/images/asherah/envelope.png&quot; alt=&quot;Diagram 2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Envelope encryption is a method for managing and storing key material alongside the data that the key encrypts. In this 
model, when you encrypt a data element, you take the key you used to encrypt the data, encrypt the &lt;strong&gt;key&lt;/strong&gt; with a separate,
&lt;em&gt;higher order&lt;/em&gt; key and then store the encrypted key in the same data structure as the encrypted data. In the diagram 
above, the higher order key is used to encrypt a random string, the lower order key plaintext, creating a lower order key
ciphertext. The “envelope” is then created with the lower order key ciphertext and the ciphertext you get by encrypting
your data with the lower order key plaintext. The dotted line shows the inclusion of these elements in the envelope.
Envelope encryption can be useful for simplifying the management of the source of truth for which key is currently in play for 
which data element (the envelope itself is the source of truth, rather than a separate metadata store) and provides a simple 
basis from which a key hierarchy can be built. A very thoughtful description of this methodology can be found &lt;a href=&quot;https://cloud.google.com/kms/docs/envelope-encryption&quot;&gt;on Google’s 
Security Products page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The notion of higher and lower order keys can be generalized to a hierarchy or tree of keys:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/engineering/assets/images/asherah/key_hierarchy.png&quot; alt=&quot;Diagram 3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The key hierarchy here has several tiers, each of which you can use to partition your data. A good example of a plausible
data partitioning scheme would be to assign each service in your infrastructure a separate SK. Then, assign each customer in 
your service a separate IK. This would mean that every data element in the DRR (data row record) layer is encrypted 
using a private key that even if recovered could never expose the data of another customer, or, any data at all from a 
different service.&lt;/p&gt;

&lt;p&gt;In order to see how all of these pieces fit together, let’s take a look a sequence diagram of a encrypting a
payload using &lt;strong&gt;Asherah&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/engineering/assets/images/asherah/happy_path_create_all_keys.svg&quot; alt=&quot;Diagram 4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The level of complexity increases significantly when different levels of keys are in need of rotation or are
stale in the cache. All of this complexity is already implemented for you in &lt;strong&gt;Asherah&lt;/strong&gt;!&lt;/p&gt;

&lt;h2 id=&quot;related-work&quot;&gt;Related work&lt;/h2&gt;

&lt;p&gt;When we decided to address these problems internally, our first step was to evaluate alternative open source libraries that
might help. There are a small number of well-supported projects that have some of the features we wanted, such as wrapping
calls to cryptographic libraries and exposing pluggable key storage backends. Two of these were similar enough that we
evaluated them in depth: the 
&lt;a href=&quot;https://docs.aws.amazon.com/encryption-sdk/latest/developer-guide/introduction.html&quot;&gt;AWS Application Encryption SDK&lt;/a&gt; and 
&lt;a href=&quot;https://github.com/google/tink&quot;&gt;Google’s Tink&lt;/a&gt;. In each case, though we did see some overlap between our goals and the 
goals of these projects, our focus on key rotation, implementing a key hierarchy for blast radius reduction, a modular
&lt;em&gt;CryptoPolicy&lt;/em&gt; idea for managing aspects of the library’s behavior and our thoughts on how to layer the library on top of
a layer that would be an area for us to continue expanding our protections of in-memory cache data ended up moving us
in the direction of our own implementation. We continue to evaluate these and other projects and are always looking for
ways to contribute and work together on these problems.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Implementing application layer encryption is a challenge to get right. &lt;strong&gt;Asherah&lt;/strong&gt; makes it easy to incorporate an 
advanced hierarchical key model with pluggable storage for key management ready-to-use, while never compromising 
on memory protection. We want developers to focus on what drives their business domain and still maintain a high 
security posture.&lt;/p&gt;

&lt;p&gt;The release of &lt;strong&gt;Asherah&lt;/strong&gt; to the public is significant: it tackles a complex problem across many languages. Internally,
our teams are continuously testing the security model provided to ensure that the ideas work and address real-world
problems. Further, this drives our progress in adding additional languages and features, which are already in the works. 
Our roadmap includes plans to perform external security audits for each codebase as we evolve the project out of the incubator 
phase. We hope the rest of the community can benefit from the work that has been invested into this project.&lt;/p&gt;

&lt;p&gt;Help us make it better! Let us know what you think! Head to &lt;a href=&quot;https://github.com/godaddy/asherah&quot;&gt;our repo&lt;/a&gt; to start learning 
more.&lt;/p&gt;

&lt;h2 id=&quot;acknowledgements&quot;&gt;Acknowledgements&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.linkedin.com/in/joewilhelm/&quot;&gt;Joey Wilhelm&lt;/a&gt; and
&lt;a href=&quot;https://www.linkedin.com/in/liliaparadis/&quot;&gt;Lilia Abaibourova&lt;/a&gt; provided
feedback on the Open Source documentation and contributed valuable
additions that make up the foundation of this effort and this post. &lt;a href=&quot;https://www.linkedin.com/in/zeroaltitude/&quot;&gt;Eddie 
Abrams&lt;/a&gt; provided cheerleading 
support and bottomless caffeinated beverages on demand.&lt;/p&gt;

&lt;h2 id=&quot;attributions&quot;&gt;Attributions&lt;/h2&gt;

&lt;p&gt;“encryption” header image by James Shiell is licensed under CC BY-NC-SA 2.0.&lt;/p&gt;</content><author><name>Nikhil Lohia</name></author><summary type="html">Enterprise data encryption is difficult, error-prone and problematic to scale. In particular, managing key rotation and limiting the blast radius of a leaked private key are difficult problems. GoDaddy is releasing its proposed solution to this problem as open source. It's an Application Encryption SDK called Asherah. Asherah's foundational principle is that you plug in your choice of key management services and then use it to manage your hierarchical key set and encrypt data using a method known as envelope encryption. We're an incubator project and currently in a request-for-feedback phase as we test the implementation internally.</summary></entry><entry><title type="html">React Native Community contribution</title><link href="http://localhost:4000/engineering/2019/06/17/react-native-community-contribution-datetimepicker-component/" rel="alternate" type="text/html" title="React Native Community contribution" /><published>2019-06-17T09:00:00-07:00</published><updated>2019-06-17T09:00:00-07:00</updated><id>http://localhost:4000/engineering/2019/06/17/react-native-community-contribution-datetimepicker-component</id><content type="html" xml:base="http://localhost:4000/engineering/2019/06/17/react-native-community-contribution-datetimepicker-component/">&lt;h1 id=&quot;datetimepicker-component&quot;&gt;DateTimePicker component&lt;/h1&gt;

&lt;p&gt;Over the years React Native has grown substantially. In an &lt;a href=&quot;https://github.com/facebook/react-native/issues/23313&quot;&gt;effort to
reduce&lt;/a&gt; the size, complexity, and dependencies for React Native a
number of modules were selected to be transformed to community modules. Among
other modules, &lt;code class=&quot;highlighter-rouge&quot;&gt;DatePickerIOS&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;DatePickerAndroid&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;TimePickerAndroid&lt;/code&gt;
were listed. Upcoming feature work for &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.godaddy.gx.go&quot;&gt;the GoDaddy mobile app&lt;/a&gt;
required us to integrate against these modules. What better moment to give back
to the React Native community? We migrated and merged the modules as a means to
contribute to the &lt;a href=&quot;https://github.com/facebook/react-native/issues/23313&quot;&gt;lean core initiative&lt;/a&gt; and join forces with the open
source community of React Native.&lt;/p&gt;

&lt;h2 id=&quot;uniform-cross-platform-components&quot;&gt;Uniform cross-platform components&lt;/h2&gt;

&lt;p&gt;The migration effort was outlined in &lt;a href=&quot;https://github.com/react-native-community/discussions-and-proposals/pull/85&quot;&gt;a proposal&lt;/a&gt; which lists three
distinct goals.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Migrate &lt;code class=&quot;highlighter-rouge&quot;&gt;DatePickerIOS&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;DatePickerAndroid&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;TimePickerAndroid&lt;/code&gt; from
React Native core to a separate module.&lt;/li&gt;
  &lt;li&gt;Merge &lt;code class=&quot;highlighter-rouge&quot;&gt;DatePickerAndroid&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;TimePickerAndroid&lt;/code&gt; to match the feature set
for iOS, which supports both &lt;code class=&quot;highlighter-rouge&quot;&gt;date&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;time&lt;/code&gt; modes.&lt;/li&gt;
  &lt;li&gt;Transform the Android APIs to React components.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;By merging both Android modules and transforming the functional API to React
components there are fewer platform-specific implementations. The overall goal
of the new combined module is to be a cross-platform React component. It
will try to converge the features of iOS and Android as much as possible.&lt;/p&gt;

&lt;h2 id=&quot;welcome-react-native-communitydatetimepicker&quot;&gt;Welcome &lt;code class=&quot;highlighter-rouge&quot;&gt;@react-native-community/datetimepicker&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Combined, the set of Android and iOS modules form a new
&lt;a href=&quot;https://github.com/react-native-community/react-native-datetimepicker&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@react-native-community/datetimepicker&lt;/code&gt; component&lt;/a&gt;. To use
this module install it with &lt;code class=&quot;highlighter-rouge&quot;&gt;npm&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;yarn&lt;/code&gt; and use &lt;code class=&quot;highlighter-rouge&quot;&gt;react-native link&lt;/code&gt; to
bundle it in your project.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install &lt;span class=&quot;nt&quot;&gt;--save&lt;/span&gt; @react-native-community/datetimepicker
react-native link @react-native-community/datetimepicker
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will make the React component available for use in your project.
Components will be rendered with default native UX for their respective
pickers. The example below will render a date picker as Modal on Android and an
inline component on iOS.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DateTimePicker&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'@react-native-community/datetimepicker'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;renderMyComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onChange&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;DateTimePicker&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onChange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onChange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;date&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Internally, the module uses React Native’s &lt;code class=&quot;highlighter-rouge&quot;&gt;requireNativeComponent&lt;/code&gt; to require
the renamed native module &lt;code class=&quot;highlighter-rouge&quot;&gt;RNDateTimePicker&lt;/code&gt;. A more detailed description for
installation per platform is available in &lt;a href=&quot;https://github.com/react-native-community/react-native-datetimepicker/#getting-started&quot;&gt;the documentation of the
component&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The current component and API’s are still part of React Native. However, you
can use the modules next to existing implementations. The externalized
component has no references to the old code nor shares the old namespace.
This makes migrating easier since you don’t have to worry about the exact
React Native release that will not include the date and time pickers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;community-guidelines&quot;&gt;Community guidelines&lt;/h2&gt;

&lt;p&gt;We took care to follow the current community standards as closely as possible.
As such the module:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;is provided with &lt;a href=&quot;https://github.com/wix/detox/&quot;&gt;Detox&lt;/a&gt; integration tests.&lt;/li&gt;
  &lt;li&gt;uses the &lt;a href=&quot;https://github.com/react-native-community/react-native-circleci-orb/&quot;&gt;circle.ci orb&lt;/a&gt; from the community to do automated testing.&lt;/li&gt;
  &lt;li&gt;provides an &lt;a href=&quot;https://github.com/react-native-community/react-native-datetimepicker/tree/master/example&quot;&gt;example&lt;/a&gt; app that works.&lt;/li&gt;
  &lt;li&gt;uses &lt;a href=&quot;https://www.npmjs.com/package/@react-native-community/eslint-config&quot;&gt;React Native’s eslint package&lt;/a&gt; to lint all code.&lt;/li&gt;
  &lt;li&gt;has a &lt;a href=&quot;https://github.com/react-native-community/react-native-datetimepicker/blob/master/RNDateTimePicker.podspec&quot;&gt;podspec&lt;/a&gt; file available from the root folder.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In addition, transforming Mocha tests to &lt;a href=&quot;/engineering/2019/05/22/testing-react-native-using-ekke/&quot;&gt;Ekke&lt;/a&gt; would be a nice new
feature for the component. It would increase confidence in the &lt;code class=&quot;highlighter-rouge&quot;&gt;DateTimePicker&lt;/code&gt;
features by running unit tests on an actual device and/or emulator.&lt;/p&gt;

&lt;h2 id=&quot;reducing-api-complexity&quot;&gt;Reducing API complexity&lt;/h2&gt;

&lt;p&gt;The externalization of components presented us with an opportunity to reduce
platform-specific implementations. Android had a &lt;a href=&quot;https://facebook.github.io/react-native/docs/0.59/datepickerandroid#example&quot;&gt;function based
API&lt;/a&gt; that returns a &lt;code class=&quot;highlighter-rouge&quot;&gt;Promise&lt;/code&gt; and only renders a modal once. That
implementation doesn’t fit the React render lifecycle well since external
state has to be kept to track render state. We’ll demonstrate the Android API
&lt;a href=&quot;#react-render-lifecycle&quot;&gt;changes later&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For now, let’s focus on the second goal: merging the feature set of both
platforms. The merger of APIs highlighted a few discrepancies. For example, iOS
uses &lt;code class=&quot;highlighter-rouge&quot;&gt;maximumDate&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;minimumDate&lt;/code&gt; to restrict range, whereas Android used
&lt;code class=&quot;highlighter-rouge&quot;&gt;maxDate&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;minDate&lt;/code&gt;.  Similarly, contrary to what the name suggests
&lt;code class=&quot;highlighter-rouge&quot;&gt;DatePickerIOS&lt;/code&gt; is also capable of displaying as time picker by setting
&lt;code class=&quot;highlighter-rouge&quot;&gt;mode=time&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;mode=datetime&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;available-options&quot;&gt;Available options&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;value&lt;/code&gt;&lt;/strong&gt; Replaces the &lt;code class=&quot;highlighter-rouge&quot;&gt;date&lt;/code&gt; prop. This is a better name for controlling
the value of the time picker. In either case, it has to be a JavaScript
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Date&lt;/code&gt;&lt;/a&gt; object.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;onChange&lt;/code&gt;&lt;/strong&gt; This methods returns both the selected &lt;code class=&quot;highlighter-rouge&quot;&gt;Date&lt;/code&gt; as well as the
&lt;code class=&quot;highlighter-rouge&quot;&gt;SyntheticEvent&lt;/code&gt; whenever the selected date changes. In addition,
&lt;code class=&quot;highlighter-rouge&quot;&gt;onDateChange&lt;/code&gt; was deprecated for iOS. Rather than having two methods,
&lt;code class=&quot;highlighter-rouge&quot;&gt;onChange&lt;/code&gt; now provides the functionality of both. For Android
&lt;code class=&quot;highlighter-rouge&quot;&gt;Promise.resolve&lt;/code&gt; will use this callback whenever a date is selected.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mode&lt;/code&gt;&lt;/strong&gt; Determines what picker should be displayed. The modes &lt;code class=&quot;highlighter-rouge&quot;&gt;date&lt;/code&gt; and
&lt;code class=&quot;highlighter-rouge&quot;&gt;time&lt;/code&gt; are available for both platforms. However, &lt;code class=&quot;highlighter-rouge&quot;&gt;datetime&lt;/code&gt; is only
available for iOS. On Android &lt;code class=&quot;highlighter-rouge&quot;&gt;mode=time&lt;/code&gt; will use the native &lt;code class=&quot;highlighter-rouge&quot;&gt;TimePicker&lt;/code&gt;
modal.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;maximumDate&lt;/code&gt;&lt;/strong&gt; sets the maximum allowed date or time. This replaces
Android’s &lt;code class=&quot;highlighter-rouge&quot;&gt;maxDate&lt;/code&gt; implementation.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;minimumDate&lt;/code&gt;&lt;/strong&gt; sets the minimum allowed date or time. this replaces
Android’s &lt;code class=&quot;highlighter-rouge&quot;&gt;minDate&lt;/code&gt; implementation.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;display&lt;/code&gt;&lt;/strong&gt; This new property controls how the picker is displayed for
Android which supports displaying pickers as &lt;code class=&quot;highlighter-rouge&quot;&gt;spinner&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;calendar&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;react-render-lifecycle&quot;&gt;React render lifecycle&lt;/h2&gt;

&lt;p&gt;To make the Android API a better fit for the React render lifecycle it has to
act more like a renderable React Component, e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;DateTimePicker /&amp;gt;&lt;/code&gt;. This is
achieved by storing a reference to an open instance of the modal whereas the
original implementation would dismiss the picker modal on each consecutive call
to the API. In the new implementation the open instance of the modal will be
updated with the value from provided properties.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RNDatePickerDialogFragment&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DialogFragment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DatePickerDialog&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Nullable&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OnDateSetListener&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mOnDateSetListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Nullable&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OnDismissListener&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mOnDismissListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dialog&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCreateDialog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bundle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Bundle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getArguments&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createDialog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getActivity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mOnDateSetListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;show-dont-tell&quot;&gt;Show, don’t tell&lt;/h2&gt;

&lt;p&gt;The component comes with a runnable &lt;a href=&quot;https://github.com/react-native-community/react-native-datetimepicker/tree/master/example&quot;&gt;React Native example app&lt;/a&gt; that
uses the new component. Below are examples of the date and time picker on both
platforms.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/engineering/assets/images/datetimepicker/ios-datepicker.png&quot; alt=&quot;DatePicker on iOS&quot; /&gt;
&lt;img src=&quot;/engineering/assets/images/datetimepicker/android-timepicker.png&quot; alt=&quot;TimePicker on Android&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This contribution to the &lt;a href=&quot;https://github.com/facebook/react-native/issues/23313&quot;&gt;lean core initiative&lt;/a&gt; will allow the
community to continue adding new features and bug fixes to the React Native
DateTimePicker component without needing a new release of React Native itself.&lt;/p&gt;

&lt;h2 id=&quot;acknowledgements&quot;&gt;Acknowledgements&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.linkedin.com/in/daniel-sa%C3%B1udo-vacas-23ab0a27&quot;&gt;Daniel Sanudo Vacas&lt;/a&gt; helped writing documentation and detox tests
for the new module.&lt;/p&gt;</content><author><name>Martijn Swaagman</name></author><summary type="html">GoDaddy contributed to the lean-core initiative by extracting and merging the DatePicker and TimePicker components so that we could us them in our mobile app. The new Component has fewer platform-specific implementations and is easier to maintain and use.</summary></entry><entry><title type="html">Testing React-Native using ekke</title><link href="http://localhost:4000/engineering/2019/05/22/testing-react-native-using-ekke/" rel="alternate" type="text/html" title="Testing React-Native using ekke" /><published>2019-05-22T09:00:00-07:00</published><updated>2019-05-22T09:00:00-07:00</updated><id>http://localhost:4000/engineering/2019/05/22/testing-react-native-using-ekke</id><content type="html" xml:base="http://localhost:4000/engineering/2019/05/22/testing-react-native-using-ekke/">&lt;h1 id=&quot;introducing-ekke-a-unique-new-test-runner-for-react-native&quot;&gt;Introducing &lt;a href=&quot;https://github.com/godaddy/ekke&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ekke&lt;/code&gt;&lt;/a&gt;, a unique new test runner for React-Native&lt;/h1&gt;

&lt;p&gt;We’re excited to announce the release of &lt;a href=&quot;https://github.com/godaddy/ekke&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ekke&lt;/code&gt;&lt;/a&gt;, a unique new test runner
for React-Native. Unlike other testing frameworks, it doesn’t execute your tests
in Node.js, with a bunch of mocks, but instead, it orchestrates the bundling and
execution of tests directly &lt;strong&gt;inside your React-Native application&lt;/strong&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;ekke&lt;/code&gt;
allows your tests to fully access every API that the platform has to offer.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img width=&quot;800&quot; height=&quot;607&quot; src=&quot;/engineering/assets/images/ekke/ekke-react-native-intro.gif&quot; /&gt;
  &lt;br /&gt;
  &lt;sub&gt;Ekke in action: running a test suite inside React-Native and streaming results back to the CLI&lt;/sub&gt;
&lt;/p&gt;

&lt;h3 id=&quot;why-did-we-build-another-testing-tool&quot;&gt;Why did we build another testing tool?&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ekke&lt;/code&gt; is the open source rewrite of a tool that we (Arnout Kazemier,
Martijn Swaagman, and Andrew Burgess) built during an internal hackathon we
held many moons ago. We wanted to create a tool that allowed us to quickly
verify that the code and its components would work in the different
environments and platforms that React-Native supported. The obvious solution
for this was to allow the tests to run as part of React-Native.&lt;/p&gt;

&lt;p&gt;There has been a lot of innovation regarding testing since we initially created
this project back in 2016. But unfortunately, the anti-patterns haven’t changed.
Many test suites are still executing their tests in a Node.js-based environment
and use imperfect, and often out-of-date, mocking systems combined with
&lt;code class=&quot;highlighter-rouge&quot;&gt;browser-env&lt;/code&gt; polyfills to simulate React-Native.&lt;/p&gt;

&lt;p&gt;As React-Native runs on different platforms using different implementations
(Objective-C for iOS, Java for Android), different JavaScript engines, and even
different versions of those JavaScript engines, it’s no guarantee that your code
works the same everywhere, and you may end up hitting inconsistencies.&lt;/p&gt;

&lt;p&gt;Running your tests in a heavily simulated environment is not an ideal solution.
That’s why we hope that &lt;code class=&quot;highlighter-rouge&quot;&gt;ekke&lt;/code&gt; can make a difference.&lt;/p&gt;

&lt;h2 id=&quot;getting-started-with-ekke&quot;&gt;Getting started with &lt;code class=&quot;highlighter-rouge&quot;&gt;ekke&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;To use &lt;code class=&quot;highlighter-rouge&quot;&gt;ekke&lt;/code&gt;, you need to install it together with one of the supported test
&lt;a href=&quot;https://github.com/godaddy/ekke#runners&quot;&gt;runners&lt;/a&gt;. For the samples here, we’re going to use &lt;code class=&quot;highlighter-rouge&quot;&gt;mocha&lt;/code&gt; as the test runner
with &lt;code class=&quot;highlighter-rouge&quot;&gt;assume&lt;/code&gt; as the assertion framework:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install &lt;span class=&quot;nt&quot;&gt;--save-dev&lt;/span&gt; ekke
npm install &lt;span class=&quot;nt&quot;&gt;--save-dev&lt;/span&gt; mocha assume
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The library consists of React-Native component, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Ekke /&amp;gt;&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;ekke&lt;/code&gt;, a CLI
that installs locally. The &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Ekke /&amp;gt;&lt;/code&gt; component needs to be integrated into a
React-Native application to execute the tests. You can use an existing
application like the one you’re currently developing or a new dedicated testing
app that you create using &lt;code class=&quot;highlighter-rouge&quot;&gt;react-native init&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Import the &lt;code class=&quot;highlighter-rouge&quot;&gt;Ekke&lt;/code&gt; component and add it somewhere in your component tree:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;YourActualApplicationHere&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./some/path'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Ekke&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ekke'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'react'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Ekke&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* props are optional */&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;YourActualApplicationHere&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Ekke /&amp;gt;&lt;/code&gt; component renders nothing in your application; it’s there to
orchestrate the execution of the tests. To give you an idea of what is
going on underneath the covers:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Waits for an active &lt;code class=&quot;highlighter-rouge&quot;&gt;ekke&lt;/code&gt; CLI by searching for one at a regular interval.&lt;/li&gt;
  &lt;li&gt;Starts a WebSocket connection with the CLI to communicate.&lt;/li&gt;
  &lt;li&gt;Fetches the bundle that is created by the CLI’s &lt;a href=&quot;https://github.com/facebook/metro&quot;&gt;Metro bundler&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Prepares the application for the execution of the bundle by setting up proxies
for &lt;code class=&quot;highlighter-rouge&quot;&gt;console.log&lt;/code&gt;’s and exception handling etc.&lt;/li&gt;
  &lt;li&gt;Evaluates the downloaded bundle in your application.&lt;/li&gt;
  &lt;li&gt;Executes the bundled test runner, and your tests.&lt;/li&gt;
  &lt;li&gt;Streams the test progress over the WebSocket connection.&lt;/li&gt;
  &lt;li&gt;Repeats this process, indefinitely.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now that the component is integrated in the application we can start writing
our first &lt;code class=&quot;highlighter-rouge&quot;&gt;test.js&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AsyncStorage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'react-native'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'mocha'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ekke'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;assume&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'assume'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'react'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'My first Ekke test'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'works with built-in React-Native APIs'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AsyncStorage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'foo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'bar'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AsyncStorage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'foo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'bar'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'renders components with our render function'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RedBox&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createRef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;RedBox&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;
&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;assume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This simple test suite will interact with the built-in &lt;code class=&quot;highlighter-rouge&quot;&gt;AsyncStorage&lt;/code&gt; API,
and render an example component on screen. All that is left now is to send
the test to &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Ekke /&amp;gt;&lt;/code&gt; component using the &lt;code class=&quot;highlighter-rouge&quot;&gt;ekke run&lt;/code&gt; CLI command:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Make sure that the simulator of your choice is running.&lt;/span&gt;
react-native run-ios &lt;span class=&quot;c&quot;&gt;# os react-native run-android&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Execute the locally installed `ekke` CLI to start the tests.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# We use `npx`, a tool provided by `npm` to execute locally installed&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# binaries.&lt;/span&gt;
npx ekke run test.js &lt;span class=&quot;nt&quot;&gt;--using&lt;/span&gt; mocha
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And watch the magic unfold. The sequence of events that will happen:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Creates and configures a new dedicated &lt;a href=&quot;https://github.com/facebook/metro&quot;&gt;Metro&lt;/a&gt; bundler which
will combine your selected test runner, and test files in a single bundle.&lt;/li&gt;
  &lt;li&gt;Starts a WebSocket server so it can communicate with the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Ekke /&amp;gt;&lt;/code&gt; component.&lt;/li&gt;
  &lt;li&gt;Informs the component that you have some tests to run.&lt;/li&gt;
  &lt;li&gt;Waits for the progress to be streamed back over established WebSocket
connection.&lt;/li&gt;
  &lt;li&gt;Closes the process with exit code 0 if your tests pass, or 1 when there was
a failure.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/engineering/assets/images/ekke/ekke-result.png&quot; alt=&quot;Our test suite passes&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It’s that simple to use &lt;code class=&quot;highlighter-rouge&quot;&gt;ekke&lt;/code&gt;. The project is now available on:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;GitHub&lt;/strong&gt;: &lt;a href=&quot;https://github.com/godaddy/ekke&quot;&gt;https://github.com/godaddy/ekke&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;NPM&lt;/strong&gt;: &lt;a href=&quot;https://www.npmjs.com/package/ekke&quot;&gt;https://www.npmjs.com/package/ekke&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;sub&gt;(If you’re wondering why it’s called &lt;code class=&quot;highlighter-rouge&quot;&gt;ekke&lt;/code&gt;, it’s short for
&lt;em&gt;Ekke-Ekke-Ekke-Ekke PTANG Zoo Boing! Z’ nourrwringmm&lt;/em&gt;, also known as the
Knights who until recently said ‘Ni!’, from the film Monty Python and the Holy
Grail)&lt;/sub&gt;&lt;/p&gt;</content><author><name>Arnout Kazemier</name></author><summary type="html">Introducing `ekke`, a new, unique test runner for React-Native. It allows you to execute your test code directly on the device, eliminating the need for imperfect mocks and enabling you to test in the same environment as your production users.</summary></entry><entry><title type="html">Creating the Domain Connect Standard</title><link href="http://localhost:4000/engineering/2019/04/25/domain-connect/" rel="alternate" type="text/html" title="Creating the Domain Connect Standard" /><published>2019-04-25T09:00:00-07:00</published><updated>2019-04-25T09:00:00-07:00</updated><id>http://localhost:4000/engineering/2019/04/25/domain-connect</id><content type="html" xml:base="http://localhost:4000/engineering/2019/04/25/domain-connect/">&lt;h2 id=&quot;a-problem-configuring-services&quot;&gt;A Problem Configuring Services&lt;/h2&gt;

&lt;p&gt;A few years ago we noticed something at GoDaddy. Third party services for email (e.g. O365 or G Suite) or web hosting (e.g. Squarespace or Shopify) were becoming more popular, and our customers were struggling to properly configure DNS. Even with the best instructions, this continues to be a high barrier for many users.  They struggle with making these changes. So services end up not being configured.&lt;/p&gt;

&lt;p&gt;To fix this, we started working with some of these third parties and developed a simple protocol and experience that allowed customers to setup these applications without having to worry about the specifics of the DNS records.  A “one click” configuration.&lt;/p&gt;

&lt;p&gt;We got this working with about a dozen different services when we realized something.  There wasn’t any rocket science in what we were doing; the protocol we developed was, largely speaking, a simple and properly formatted web-based link from the Service Provider to us. So why not turn it into an open standard? We took our protocol, filled in a few gaps, and generalized it up to make it more standards friendly.&lt;/p&gt;

&lt;p&gt;Out of this process we created Domain Connect.&lt;/p&gt;

&lt;h2 id=&quot;what-is-domain-connect&quot;&gt;What is Domain Connect?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://domainconnect.org&quot;&gt;Domain Connect&lt;/a&gt; is an open standard that makes it easier for users of services like Squarespace or O365 to configure DNS without having to understand the details. Domain Connect involves two parties. The first is the Service Provider whose user wants to configure DNS to enable the service, and the other is the DNS Provider.&lt;/p&gt;

&lt;p&gt;Historically a Service Provider would first ask the user for a domain name. The Service Provider would then try to figure out the company providing DNS, typically by querying the top-level-domain (the TLD) for the nameservers for the domain. The TLD for godaddy.com is .com. Based on a hard-coded table, the Service Provider would then give instructions to the user telling them how to setup DNS.  This might involve screen shots, videos, or simple instructions.&lt;/p&gt;

&lt;p&gt;This is a complex operation for users and they often get lost or confused, resulting in a bad user experience. This often leads to higher support costs for both the Service and DNS Providers. And ironically the more help the Service Provider gives the user, the more likely things go off the rails if and when the DNS Provider updates their interface.&lt;/p&gt;

&lt;p&gt;Domain Connect solves this problem for the user. The protocol has two components.&lt;/p&gt;

&lt;p&gt;The first is in the “discovery” stage of the protocol. Having a hard-coded table of nameservers to determine the DNS Provider is error prone. So instead of doing a query to the TLD for the nameserver, the Service Provider can query the &lt;code class=&quot;highlighter-rouge&quot;&gt;_domainconnect&lt;/code&gt; TXT record directly from DNS for the domain and determine the DNS Provider.&lt;/p&gt;

&lt;p&gt;The second component makes the changes to DNS. For this the Service Provider will have first onboarded a template of changes to enable their service with the DNS Provider. Now when the user types their domain name, the Service Provider links to the DNS Provider providing (amongst other data) the domain name, the template, and any other settings. The DNS Provider signs the user in, verifies the user owns the domain name, confirms the change with the user, and makes changes to DNS by applying the template.&lt;/p&gt;

&lt;p&gt;Note: There is also an OAuth based version where instead of the DNS Provider making the changes to DNS, an OAuth token is handed back to the Service Provider which later calls an API to apply a template.&lt;/p&gt;

&lt;p&gt;These templates are the cornerstone of Domain Connect. The template encapsulates all the DNS changes a Service Provider requires, and allows the DNS Provider to approve and manage the changes.&lt;/p&gt;

&lt;p&gt;The current version of the specification can be found &lt;a href=&quot;https://www.domainconnect.org/specification/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;a-standard-is-born&quot;&gt;A Standard is Born&lt;/h2&gt;

&lt;p&gt;Our next step was to gain adoption.  We already had a dozen plus Service Providers supporting the protocol. But we wanted more DNS Providers.  We started talking about it with all the main DNS Providers, and while there was a great deal of interest and support there was little action.  Implementation fell into their various backlogs.&lt;/p&gt;

&lt;p&gt;This all changed at a Hackathon at Cloudfest in the spring of 2017.  Some engineers from GoDaddy, Host Europe Group, and United Domains got together and implemented two projects. The first was to add Domain Connect support to United Domains.  The other project was to build a simple example Service Provider. The latter has since evolved, but can be found at &lt;a href=&quot;https://exampleservice.domainconnect.org&quot;&gt;https://exampleservice.domainconnect.org&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;At the end of the hackathon we successfully demonstrated configuring our new example service with a domain at United Domains and at GoDaddy.  Coincidently the MC of the hackathon was Paul Mockapetris, who along with Jon Postel is credited as a co-inventor of DNS. A highlight was when we explained the reason for doing this was that normal users don’t understand DNS.  Paul is a good-natured person who appreciated and largely agreed with this jab.&lt;/p&gt;

&lt;p&gt;After the hackathon things really took off. United Domains recruited 1&amp;amp;1 which launched an implementation. This led to several more DNS Providers. The Service Providers now had more incentive to implement the protocol.  Other companies like Microsoft and Automattic got behind it.&lt;/p&gt;

&lt;h2 id=&quot;providing-more-customer-value&quot;&gt;Providing more Customer Value&lt;/h2&gt;

&lt;p&gt;Building on this we decided to do some more projects at the Cloudfest Hackathon in 2018. This time we helped Plesk add support for the protocol, both as a DNS and Service Provider.&lt;/p&gt;

&lt;p&gt;We also decided to build something useful for customers. We wondered if we could build a Dynamic DNS (DDNS) application using Domain Connect. This allows a server that uses DHCP and gets a dynamic IP address to update a DNS entry whenever the IP address changes. This functionality was popular in the late 1990s with some routers and DNS provides supporting proprietary protocols. While not as commonly used today, some small business customers and advanced users still use this capability.&lt;/p&gt;

&lt;p&gt;As you may guess, we were successful and built a &lt;a href=&quot;https://github.com/Domain-Connect/DomainConnectDDNS-Windows&quot;&gt;nifty little Windows Application&lt;/a&gt; that does this. It runs as a Windows Service or as a System Tray Icon (later we also built Linux versions). It uses the Domain Connect protocol to update an A record whenever your IP address changes. With a short TTL, this is what DDNS does.&lt;/p&gt;

&lt;p&gt;Note: For this implementation the Domain Connect is implemented using OAuth.  The end user grants permission for the application to update DNS using Domain Connect on their behalf.&lt;/p&gt;

&lt;p&gt;There are two interesting things about this application.&lt;/p&gt;

&lt;p&gt;First, we built our DDNS application on top of an open source protocol. This means that any DNS service that supports Domain Connect using the asynchronous OAuth flow can support DDNS.&lt;/p&gt;

&lt;p&gt;Second, to our knowledge this is the first use of OAuth where a single application is implemented to talk to multiple OAuth providers.  While most OAuth implementations are built to allow multiple applications to access an API, they are purpose built for one service.  For example, Facebook uses OAuth to allow third-party applications to access Facebook APIs on behalf of the granting users. But these third-party applications only talk to Facebook.&lt;/p&gt;

&lt;p&gt;This application uses OAuth to call the same API at different providers. It talks to GoDaddy, or just as easily to 1&amp;amp;1.  Pretty cool to a nerd.  The application can be found at &lt;a href=&quot;https://github.com/Domain-Connect/DomainConnectDDNS-Windows&quot;&gt;https://github.com/Domain-Connect/DomainConnectDDNS-Windows&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Of course coming out of this hackathon participants from multiple companies helped to improve and evolve the specification.  It has since evolved and is supported by over 40 companies with contributors from a wide variety of them, all listed at &lt;a href=&quot;https://domainconnect.org&quot;&gt;https://domainconnect.org&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As time passed, more Service Providers onboarded. This included G Suite from Google.&lt;/p&gt;

&lt;h2 id=&quot;removing-barriers-for-dns-providers&quot;&gt;Removing Barriers for DNS Providers&lt;/h2&gt;

&lt;p&gt;One challenge we continued to face was getting more DNS Providers onboard. They were all highly supportive, but had trouble getting past the implementation hurdle.  Service Providers were able to onboard in a matter of a couple of days using the examples, but DNS Providers didn’t have the same level of support.&lt;/p&gt;

&lt;p&gt;So we went into our third year at the Cloudfest Hackathon with a goal to solve this problem.&lt;/p&gt;

&lt;p&gt;We built a reference implementation for DNS Providers. This library was used to build a proof of concept on top of PowerDNS and Bind.&lt;/p&gt;

&lt;p&gt;Like all the open source examples as part of Domain Connect, this can be found at &lt;a href=&quot;https://www.domainconnect.org/code/&quot;&gt;https://www.domainconnect.org/code/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We currently have several major DNS Providers leveraging this library and launching their implementations in the coming months.&lt;/p&gt;

&lt;h2 id=&quot;the-future&quot;&gt;The Future&lt;/h2&gt;

&lt;p&gt;At GoDaddy, we continue to onboard Service Providers onto the platform. And we are looking forward to working with the community to push forward the spec. We also enjoy and will continue to work with the other DNS Providers to help them onboard to the protocol. This helps consumers and makes the Internet easier to use. They say a rising tide lifts all boats, and we feel that Domain Connect is a great ‘tide’.&lt;/p&gt;

&lt;p&gt;As an open standard, it is the community at large that owns and improves it. Feel free to check out &lt;a href=&quot;https://domainconnect.org&quot;&gt;https://domainconnect.org&lt;/a&gt; to learn more or get involved.&lt;/p&gt;</content><author><name>Arnold Blinn</name></author><summary type="html">Domain Connect is an open standard that makes it easier for users of services like Squarespace or O365 to configure DNS without having to understand the details. The protocol involves two parties. The first is the Service Provider whose user wants to configure DNS to enable the service, and the other is the DNS Provider. The most immediate reaction to it is usually 'This is a no-brainer'. But how did it get created and evolve? How can it help others?</summary></entry><entry><title type="html">Kubernetes External Secrets</title><link href="http://localhost:4000/engineering/2019/04/16/kubernetes-external-secrets/" rel="alternate" type="text/html" title="Kubernetes External Secrets" /><published>2019-04-16T09:00:00-07:00</published><updated>2019-04-16T09:00:00-07:00</updated><id>http://localhost:4000/engineering/2019/04/16/kubernetes-external-secrets</id><content type="html" xml:base="http://localhost:4000/engineering/2019/04/16/kubernetes-external-secrets/">&lt;p&gt;Teams at GoDaddy use the AWS managed Kubernetes offering,
&lt;a href=&quot;https://aws.amazon.com/eks/&quot;&gt;EKS&lt;/a&gt;, to deploy their services. We also
use AWS &lt;a href=&quot;https://aws.amazon.com/secrets-manager/&quot;&gt;Secrets Manager&lt;/a&gt; for
storing secrets, like private keys and database passwords. EKS,
however, does not provide much support for accessing Secrets
Manager. Therefore, teams develop custom solutions for
accessing secret data from their EKS clusters. One approach, for
example, is to fetch secrets from Secret Manager when the application
starts. The result is overlapping efforts for developing these custom
solutions and because security is critical in this context, the
individual efforts can require substantial engineering time.&lt;/p&gt;

&lt;p&gt;This blog post describes a generalized approach and
implementation for supporting secret management systems, like AWS Secrets
Manager, in Kubernetes. We call this system Kubernetes External
Secrets and we have &lt;a href=&quot;https://github.com/godaddy/kubernetes-external-secrets&quot;&gt;open
sourced&lt;/a&gt; our
initial implementation. Our current solution focuses on making it easy
for developers to manage secrets with AWS and deploy them to their EKS
clusters, but we think our approach is general enough for other types
of Kubernetes clusters and secret management systems.&lt;/p&gt;

&lt;p&gt;The rest of this blog post describes the motivation for and design of
Kubernetes External Secrets. The
&lt;a href=&quot;https://github.com/godaddy/kubernetes-external-secrets&quot;&gt;README.md&lt;/a&gt;
has instructions for adding Kubernetes External Secrets to your
cluster if you are looking to get started immediately.&lt;/p&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;Kubernetes has a built-in object for managing secrets called a
&lt;a href=&quot;https://kubernetes.io/docs/concepts/configuration/secret/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Secret&lt;/code&gt;&lt;/a&gt;. The
&lt;code class=&quot;highlighter-rouge&quot;&gt;Secret&lt;/code&gt; object is convenient to use: it provides a declarative API
that makes it easy for application
&lt;a href=&quot;https://kubernetes.io/docs/concepts/configuration/secret/#using-secrets&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Pods&lt;/code&gt;&lt;/a&gt;
to access secret data without any special code.  One downside of
&lt;code class=&quot;highlighter-rouge&quot;&gt;Secret&lt;/code&gt; objects is that they do not support storing or retrieving
secret data from external secret management systems. It’s often
beneficial, however, to use Kubernetes with an external service that
handles secret management and includes useful features. For
example, Secrets Manager integrates with other AWS services, like
Lambda functions, includes encryption at rest, and has a useful
mechanism for codifying rotation policies.&lt;/p&gt;

&lt;p&gt;Kubernetes External Secrets aims to provide the same ease of use as
native &lt;code class=&quot;highlighter-rouge&quot;&gt;Secret&lt;/code&gt; objects and provide access to secrets stored
externally. It does this by adding an &lt;code class=&quot;highlighter-rouge&quot;&gt;ExternalSecret&lt;/code&gt; object to the
Kubernetes API that allows developers to inject external secrets into
a &lt;code class=&quot;highlighter-rouge&quot;&gt;Pod&lt;/code&gt; using a declarative API similar to the native &lt;code class=&quot;highlighter-rouge&quot;&gt;Secret&lt;/code&gt;
one.&lt;/p&gt;

&lt;p&gt;Instead of inlining base64 encoded secret data into a &lt;code class=&quot;highlighter-rouge&quot;&gt;Secret&lt;/code&gt; object,
developers define an &lt;code class=&quot;highlighter-rouge&quot;&gt;ExternalSecret&lt;/code&gt; object that specifies a secret
management system and properties to load from that system.&lt;/p&gt;

&lt;p&gt;For example, instead of using a &lt;code class=&quot;highlighter-rouge&quot;&gt;Secret&lt;/code&gt; object to store a database
password:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Secret&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;cats-and-dogs&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Opaque&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;d29vZgo=&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;a developer can use an &lt;code class=&quot;highlighter-rouge&quot;&gt;ExternalSecret&lt;/code&gt;, specifying the secret
management systems as &lt;code class=&quot;highlighter-rouge&quot;&gt;backendType&lt;/code&gt; and the properties to access in the
&lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt; array:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;kubernetes-client.io/v1'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ExtrenalSecret&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;cats-and-dogs&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;secretDescriptor&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;backendType&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;secretsManager&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;cats-and-dogs/mysql-password&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;password&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and access that password from a &lt;code class=&quot;highlighter-rouge&quot;&gt;Pod&lt;/code&gt; in the same way they would
if they were using a &lt;code class=&quot;highlighter-rouge&quot;&gt;Secret&lt;/code&gt; object:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Pod&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;cats-and-dogs&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;cats-and-dogs&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;cats-and-dogs&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;SECRET_PASSWORD&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;valueFrom&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;secretKeyRef&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;cats-and-dogs&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;password&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Notice that the &lt;code class=&quot;highlighter-rouge&quot;&gt;ExternalSecret&lt;/code&gt; does not contain secret data. It’s
safe to store in plain text along with your other Kubernetes manifest
files for your service.&lt;/p&gt;

&lt;h2 id=&quot;design&quot;&gt;Design&lt;/h2&gt;

&lt;p&gt;Kubernetes External Secrets adds the &lt;code class=&quot;highlighter-rouge&quot;&gt;ExternalSecret&lt;/code&gt; object to
Kubernetes using a
&lt;a href=&quot;https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CustomResourceDefinition&lt;/code&gt;&lt;/a&gt;,
and adds an &lt;code class=&quot;highlighter-rouge&quot;&gt;ExternalSecret&lt;/code&gt; controller we wrote in Node.js that implements
the behavior of the object type itself.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;ExternalSecret&lt;/code&gt; controller follows a familiar pattern seen in
other Kubernetes objects, like
&lt;a href=&quot;https://kubernetes.io/docs/concepts/workloads/controllers/deployment/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Deployments&lt;/code&gt;&lt;/a&gt;:
users declare a desired state in an &lt;code class=&quot;highlighter-rouge&quot;&gt;ExternalSecret&lt;/code&gt; object and the
controller creates or updates a complementary &lt;code class=&quot;highlighter-rouge&quot;&gt;Secret&lt;/code&gt; object to reach
that state. The controller monitors &lt;code class=&quot;highlighter-rouge&quot;&gt;ExternalSecret&lt;/code&gt; objects, fetches
secret data from the specified external secret management system, and automatically
creates native &lt;code class=&quot;highlighter-rouge&quot;&gt;Secret&lt;/code&gt; objects that hold the secret data. The
architecture diagram below illustrates this process.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/engineering/assets/images/kubernetes-external-secrets/architecture.png&quot; alt=&quot;Architecture Diagram&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;using&quot;&gt;Using&lt;/h2&gt;

&lt;p&gt;You can add Kubernetes External Secrets to your cluster with a single command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl apply -f https://raw.githubusercontent.com/godaddy/kubernetes-external-secrets/master/external-secrets.yml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and begin manipulating &lt;code class=&quot;highlighter-rouge&quot;&gt;ExternalSecret&lt;/code&gt; objects like you would any
other Kubernetes object type:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl -n cats-and-dogs get es
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you’re interested in converting existing &lt;code class=&quot;highlighter-rouge&quot;&gt;Secret&lt;/code&gt; objects to
&lt;code class=&quot;highlighter-rouge&quot;&gt;ExternalSecret&lt;/code&gt; objects, one of the authors of Kubernetes External
Secrets wrote a &lt;a href=&quot;https://github.com/silasbw/kubernetes-external-secrets-cli&quot;&gt;Kubernetes External Secrets
CLI&lt;/a&gt; that
makes migration easy by converting a &lt;code class=&quot;highlighter-rouge&quot;&gt;Secret&lt;/code&gt; to a series of AWS
CLI commands and a kubectl command that loads your secret data
into AWS Secrets Manager and creates a complementary &lt;code class=&quot;highlighter-rouge&quot;&gt;ExternalSecret&lt;/code&gt;
object.&lt;/p&gt;

&lt;h2 id=&quot;other-approaches&quot;&gt;Other approaches&lt;/h2&gt;

&lt;p&gt;We experimented with and drew inspiration from other projects that
help manage access to secret data from Kubernetes.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/cmattoon/aws-ssm&quot;&gt;cmattoon/aws-ssm&lt;/a&gt; uses annotations on
&lt;code class=&quot;highlighter-rouge&quot;&gt;Secret&lt;/code&gt; objects to identify properties in AWS Parameter Store and
populate the &lt;code class=&quot;highlighter-rouge&quot;&gt;Secret&lt;/code&gt; object with those properties’ values.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/shyiko/kubesec&quot;&gt;kubesec&lt;/a&gt; makes it easy to encrypt
data before storing it in a &lt;code class=&quot;highlighter-rouge&quot;&gt;Secret&lt;/code&gt; object or manifest. At run-time,
applications are responsible for decrypting the data before using it.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/Boostport/kubernetes-vault&quot;&gt;Kubernetes Vault
Integration&lt;/a&gt; project
provides Vault auth tokens to &lt;code class=&quot;highlighter-rouge&quot;&gt;Pod&lt;/code&gt; objects. Application code running
in a &lt;code class=&quot;highlighter-rouge&quot;&gt;Pod&lt;/code&gt; can use that token to authenticate with Vault and retrieve
secret data.&lt;/p&gt;

&lt;p&gt;We explored configuring nodes in our CICD pipeline to inject
&lt;code class=&quot;highlighter-rouge&quot;&gt;Secret&lt;/code&gt; objects during testing and deployment. One benefit of this
approach is that Kubernetes clusters would not need to access the
external secret management system directly, which might help mitigate
data leaks during an attack. On the other
hand, it required the Kubernetes manifest files for a single
application to be stored in several locations and complicated
application debugging and deployment because developers would need to
use a combination of kubectl and specialized CICD tools.&lt;/p&gt;

&lt;h2 id=&quot;upcoming-improvements&quot;&gt;Upcoming improvements&lt;/h2&gt;

&lt;p&gt;Kubernetes External Secrets supports AWS Secrets Manager and AWS
Systems Manager, however, we believe the approach is general enough to
support other external secret management systems and would be excited
about working with community members to add them.&lt;/p&gt;

&lt;p&gt;The Kubernetes External Secrets controller does not have a broad
attack surface since it is accessible only via the Kubernetes API. We
have worked, however, to tighten security by leveraging
&lt;a href=&quot;https://kubernetes.io/docs/reference/access-authn-authz/rbac/&quot;&gt;RBAC&lt;/a&gt;
to restrict what the &lt;a href=&quot;https://github.com/godaddy/kubernetes-external-secrets/blob/master/external-secrets.yml&quot;&gt;controller can
access&lt;/a&gt;,
using
&lt;a href=&quot;https://github.com/nodesecurity/eslint-plugin-security&quot;&gt;eslint-plugin-security&lt;/a&gt;
to identify potentially vulnerable code patterns, and doing design
reviews at GoDaddy. Nevertheless, we think it is important to
continually improve security and take advantage of new features and
patterns as they emerge. We plan on continuing to improve security by:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/godaddy/kubernetes-external-secrets/issues/37&quot;&gt;restricting network access&lt;/a&gt; to staunch potential attacks that might try to leak secrets;&lt;/li&gt;
  &lt;li&gt;facilitating rotation by &lt;a href=&quot;https://github.com/godaddy/kubernetes-external-secrets/issues/38&quot;&gt;triggering restarts&lt;/a&gt; when there is an update to an &lt;code class=&quot;highlighter-rouge&quot;&gt;ExternalSecret&lt;/code&gt;;&lt;/li&gt;
  &lt;li&gt;working through a threat model analysis; and&lt;/li&gt;
  &lt;li&gt;adopting upcoming EKS features, like &lt;a href=&quot;https://github.com/aws/containers-roadmap/issues/23&quot;&gt;IAM roles for &lt;code class=&quot;highlighter-rouge&quot;&gt;Pods&lt;/code&gt;&lt;/a&gt;, that
will help harden our implementation.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;We hope that Kubernetes External Secrets can provide teams outside of
GoDaddy with a common way to access secret data in secret management
systems. Using Kubernetes External Secrets does not require any
application modifications and existing &lt;code class=&quot;highlighter-rouge&quot;&gt;Pod&lt;/code&gt; specifications that
leverage &lt;code class=&quot;highlighter-rouge&quot;&gt;Secret&lt;/code&gt; objects will work with &lt;code class=&quot;highlighter-rouge&quot;&gt;ExternalSecret&lt;/code&gt; objects
without any changes.&lt;/p&gt;

&lt;p&gt;If you want to get started with Kubernetes External Secrets or
contribute please visit
&lt;a href=&quot;https://github.com/godaddy/kubernetes-external-secrets&quot;&gt;https://github.com/godaddy/kubernetes-external-secrets&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;acknowledgements&quot;&gt;Acknowledgements&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.linkedin.com/in/celiawaggoner/&quot;&gt;Celia Waggoner&lt;/a&gt; and
&lt;a href=&quot;https://www.linkedin.com/in/jcruger/&quot;&gt;Jarrett Cruger&lt;/a&gt; provided
feedback on the Kubernetes External Secrets design and contributed to
early versions of the implementation.&lt;/p&gt;</content><author><name>Silas Boyd-Wickizer</name></author><summary type="html">Engineering teams at GoDaddy use Kubernetes with secret management systems, like AWS Secrets Manager. &quot;External&quot; secret management systems often provide useful features, such as rotation, that the native Kubernetes Secret object does not support. Kubernetes External Secrets is a new open source project that introduces the ExternalSecret object type. With an ExternalSecret object, an engineering team can manage its secret data in an external system and access that data in the same way they would if they were using a Secret object.</summary></entry><entry><title type="html">Creating better examples with @exemplar/storybook</title><link href="http://localhost:4000/engineering/2019/04/09/announcing-exemplar/" rel="alternate" type="text/html" title="Creating better examples with @exemplar/storybook" /><published>2019-04-09T09:00:00-07:00</published><updated>2019-04-09T09:00:00-07:00</updated><id>http://localhost:4000/engineering/2019/04/09/announcing-exemplar</id><content type="html" xml:base="http://localhost:4000/engineering/2019/04/09/announcing-exemplar/">&lt;p&gt;&lt;a href=&quot;https://storybook.js.org/basics/guide-react/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@storybook/react&lt;/code&gt;&lt;/a&gt; is a tool we can use to facilitate development of &lt;a href=&quot;https://reactjs.org/&quot;&gt;React&lt;/a&gt;
components by viewing them in isolation in an environment conducive to rapid
iteration and low-cost experimentation. &lt;a href=&quot;https://github.com/godaddy/exemplar&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@exemplar/storybook&lt;/code&gt;&lt;/a&gt; wraps
&lt;code class=&quot;highlighter-rouge&quot;&gt;@storybook/react&lt;/code&gt; in a way that eliminates all &lt;code class=&quot;highlighter-rouge&quot;&gt;storybook&lt;/code&gt;-specific boilerplate
from your code base. Without &lt;code class=&quot;highlighter-rouge&quot;&gt;@exemplar/storybook&lt;/code&gt;, your examples tend to have a
lot of tangentially related boilerplate code.&lt;/p&gt;

&lt;p&gt;For a team maintaining a large set of &lt;code class=&quot;highlighter-rouge&quot;&gt;react&lt;/code&gt; components, &lt;code class=&quot;highlighter-rouge&quot;&gt;@exemplar/storybook&lt;/code&gt;
achieves 3 goals:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Copy-and-paste ready examples&lt;/strong&gt;: a good example can be dropped into an
application with little to no changes necessary.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Clear &lt;code class=&quot;highlighter-rouge&quot;&gt;require&lt;/code&gt; / &lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt; usage&lt;/strong&gt;: prefer &lt;code class=&quot;highlighter-rouge&quot;&gt;import xx from 'your-module'&lt;/code&gt; vs. a
relative path such as &lt;code class=&quot;highlighter-rouge&quot;&gt;import xx from '../../path/to/component'&lt;/code&gt;;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Hide example presentation layer&lt;/strong&gt;: the consumers of your components don’t have
to know anything about your example framework (e.g. Storybook, Docz, etc.).&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;how-do-i-use-it&quot;&gt;How do I use it?&lt;/h2&gt;

&lt;h4 id=&quot;0-install&quot;&gt;0. Install&lt;/h4&gt;

&lt;p&gt;Install the tool, if you haven’t already:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install &lt;span class=&quot;nt&quot;&gt;--save-dev&lt;/span&gt; @exemplar/storybook
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;1-setup&quot;&gt;1. Setup&lt;/h4&gt;

&lt;p&gt;Setup an &lt;code class=&quot;highlighter-rouge&quot;&gt;examples/&lt;/code&gt; directory that has the following structure&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;examples/
  &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.js        &lt;span class=&quot;c&quot;&gt;# Examples that run on all platforms&lt;/span&gt;
  web/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.js    &lt;span class=&quot;c&quot;&gt;# Examples that run on Web only&lt;/span&gt;

  .setup/        &lt;span class=&quot;c&quot;&gt;# optionally augment the build with any setup that you need&lt;/span&gt;
    aliases.json &lt;span class=&quot;c&quot;&gt;# Any webpack aliases&lt;/span&gt;
    shared.scss  &lt;span class=&quot;c&quot;&gt;# Global styles&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Each of these examples (present as &lt;code class=&quot;highlighter-rouge&quot;&gt;.js&lt;/code&gt; files) take the form of a regular
&lt;code class=&quot;highlighter-rouge&quot;&gt;react&lt;/code&gt; component, making them extremely copy-and-paste-able directly into your
application.&lt;/p&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'react'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Button&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'@your-very-own/design-system'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    Press Me!
  &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;2-scripts&quot;&gt;2. Scripts&lt;/h4&gt;

&lt;p&gt;Add the following script to your &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;storybook&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;start-storybook -p 9001 -c ./node_modules/@exemplar/storybook&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That’s it! Here is &lt;code class=&quot;highlighter-rouge&quot;&gt;@exemplar/storybook&lt;/code&gt; showing all of GoDaddy’s primary action
buttons at once:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm run storybook
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/engineering/assets/images/exemplar/buttons.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;whats-next&quot;&gt;What’s Next?&lt;/h2&gt;

&lt;p&gt;Right now this implementation commits to styling with &lt;code class=&quot;highlighter-rouge&quot;&gt;.scss&lt;/code&gt;. Future work will
work will be done to support more than &lt;code class=&quot;highlighter-rouge&quot;&gt;.scss&lt;/code&gt; out of the box.&lt;/p&gt;

&lt;p&gt;As of right now &lt;code class=&quot;highlighter-rouge&quot;&gt;storybook-native&lt;/code&gt; is still evolving. There is currently ongoing
work in the form of &lt;a href=&quot;https://github.com/storybooks/storybook/pull/4942&quot;&gt;this PR&lt;/a&gt;, but it’s not quite stable enough (yet) to work
consistently on our internal &lt;code class=&quot;highlighter-rouge&quot;&gt;react-native&lt;/code&gt; use cases. We’re eagerly awaiting
the results!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Cover photo by &lt;a href=&quot;https://unsplash.com/@alfonsmc10&quot;&gt;Alfons Morales&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/photos/YLSwjSy7stw&quot;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Sivan Mehta</name></author><summary type="html">We're announcing the release of @exemplar/storybook! Exemplar is a way to write examples for your React components with less boilerplate storybook config. Do more by writing less.</summary></entry><entry><title type="html">Making React HOC functions the easy way with addhoc</title><link href="http://localhost:4000/engineering/2019/04/02/addhoc/" rel="alternate" type="text/html" title="Making React HOC functions the easy way with addhoc" /><published>2019-04-02T09:00:00-07:00</published><updated>2019-04-02T09:00:00-07:00</updated><id>http://localhost:4000/engineering/2019/04/02/addhoc</id><content type="html" xml:base="http://localhost:4000/engineering/2019/04/02/addhoc/">&lt;p&gt;Higher-order components, or HOCs, are a powerful way to add functionality or adjust behavior of arbitrary components.
Indeed, libraries often provide HOCs to augment components with functionality or information.&lt;/p&gt;

&lt;p&gt;Take &lt;a href=&quot;https://react-redux.js.org/&quot;&gt;react-redux&lt;/a&gt;, for example: to connect your component to your store, you use the &lt;code class=&quot;highlighter-rouge&quot;&gt;connect()&lt;/code&gt; HOC. &lt;code class=&quot;highlighter-rouge&quot;&gt;connect()&lt;/code&gt; wraps
your UI component with a container component that handles passing state between the store and the UI component. Or
&lt;a href=&quot;https://reacttraining.com/react-router/&quot;&gt;react-router&lt;/a&gt;’s &lt;code class=&quot;highlighter-rouge&quot;&gt;withRouter&lt;/code&gt; HOC, which injects the router functionality and information into your page components
seamlessly.&lt;/p&gt;

&lt;h2 id=&quot;sounds-cool-how-do-i-get-in-on-this&quot;&gt;Sounds cool! How do I get in on this?&lt;/h2&gt;

&lt;p&gt;Glad you asked! The &lt;a href=&quot;https://reactjs.org/docs/higher-order-components.html&quot;&gt;React docs&lt;/a&gt; explain how you too can build HOCs. But spend some time in that doc and you’ll soon
realize that &lt;a href=&quot;https://en.wikipedia.org/wiki/Here_be_dragons&quot;&gt;here there be dragons&lt;/a&gt;. When you build a HOC, you’re now on the hook to manage proper communication
between parents and children of the wrapped component.&lt;/p&gt;

&lt;p&gt;You must:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://reactjs.org/docs/higher-order-components.html#convention-pass-unrelated-props-through-to-the-wrapped-component&quot;&gt;pass through unrelated &lt;code class=&quot;highlighter-rouge&quot;&gt;props&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://reactjs.org/docs/higher-order-components.html#convention-wrap-the-display-name-for-easy-debugging&quot;&gt;wrap the display name for easy debugging&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://reactjs.org/docs/higher-order-components.html#static-methods-must-be-copied-over&quot;&gt;hoist non-React statics&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://reactjs.org/docs/higher-order-components.html#refs-arent-passed-through&quot;&gt;forward &lt;code class=&quot;highlighter-rouge&quot;&gt;refs&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Furthermore, these considerations are interrelated, so you need to make sure to handle them in the right order and
hierarchy.&lt;/p&gt;

&lt;h2 id=&quot;ew-this-sounds-ugly&quot;&gt;Ew, this sounds ugly…&lt;/h2&gt;

&lt;p&gt;I agree.&lt;/p&gt;

&lt;p&gt;You see, recently, I was writing a HOC to provide &lt;a href=&quot;https://reactjs.org/docs/context.html&quot;&gt;React 16 Context API&lt;/a&gt; functionality to components. I read
those docs and hit each of those caveats. I spent a day or two carefully arranging code to handle them elegantly, wrote
thorough tests, and patted myself on the back. Then, I moved onto my next ticket and had to do the same thing for a
different context.&lt;/p&gt;

&lt;p&gt;Like any good software engineer, I am lazy. I hate doing the same thing twice. So, I took what I learned from the first
HOC and extracted it into a new open source module.&lt;/p&gt;

&lt;h2 id=&quot;avoid-building-hocs-ad-hoc-with-addhoc&quot;&gt;Avoid building HOCs ad hoc with &lt;code class=&quot;highlighter-rouge&quot;&gt;addhoc&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;I’m excited to share &lt;a href=&quot;https://github.com/godaddy/addhoc&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;addhoc&lt;/code&gt;&lt;/a&gt;, a new open-source module to vastly simplify building &lt;em&gt;correct&lt;/em&gt; HOCs. It takes the pain
out of the process so you can focus on the actual value-add you’re trying to provide.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;addhoc&lt;/code&gt; creates HOC functions that automatically:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://reactjs.org/docs/higher-order-components.html#convention-pass-unrelated-props-through-to-the-wrapped-component&quot;&gt;pass through unrelated &lt;code class=&quot;highlighter-rouge&quot;&gt;props&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://reactjs.org/docs/higher-order-components.html#convention-wrap-the-display-name-for-easy-debugging&quot;&gt;wrap the display name for easy debugging&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://reactjs.org/docs/higher-order-components.html#static-methods-must-be-copied-over&quot;&gt;hoist non-React statics&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://reactjs.org/docs/higher-order-components.html#refs-arent-passed-through&quot;&gt;forward &lt;code class=&quot;highlighter-rouge&quot;&gt;refs&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;nice-how-do-i-use-it&quot;&gt;Nice, how do I use it?&lt;/h2&gt;

&lt;p&gt;It’s easy. Start by installing &lt;code class=&quot;highlighter-rouge&quot;&gt;addhoc&lt;/code&gt; as a dependency:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# --save is default in the latest npm, and thus optional here&lt;/span&gt;
npm install &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; addhoc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, import &lt;code class=&quot;highlighter-rouge&quot;&gt;addhoc&lt;/code&gt; in your code and start building HOCs.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;addhoc&lt;/code&gt; is a function that returns a HOC function. To construct your HOC, you pass a callback that acts as the render
function of your top-level component.&lt;/p&gt;

&lt;p&gt;Your callback is provided a function parameter that returns the wrapped child that’s initially provided to the HOC. You
can call that callback with an object of &lt;code class=&quot;highlighter-rouge&quot;&gt;props&lt;/code&gt; to add to the wrapped component.&lt;/p&gt;

&lt;p&gt;You can also optionally pass in a string name to show when debugging the React component hierarchy.&lt;/p&gt;

&lt;p&gt;Let’s take a look at some examples to better illustrate how to use it:&lt;/p&gt;

&lt;h3 id=&quot;example-1-adding-a-prop&quot;&gt;Example 1: Adding a &lt;code class=&quot;highlighter-rouge&quot;&gt;prop&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Sometimes, you want to add one or more &lt;code class=&quot;highlighter-rouge&quot;&gt;props&lt;/code&gt; to wrapped components. With &lt;code class=&quot;highlighter-rouge&quot;&gt;addhoc&lt;/code&gt;, you can make a HOC to do this in
one line of code.&lt;/p&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;addhoc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'addhoc'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyComponent&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./my-component'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Make the HOC function&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;withFooProp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;addhoc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getWrappedComponent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getWrappedComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'WithFooProp'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Wrap your component using the HOC&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyComponentWithFoo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;withFooProp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MyComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Rendering a MyComponentWithFoo will create a MyComponent with prop foo = true&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// The component hierarchy will look like&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//   WithFooProp(MyComponent)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//   └── MyComponent&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;example-2-wrapping-in-another-component&quot;&gt;Example 2: Wrapping in another component&lt;/h3&gt;

&lt;p&gt;Another common HOC scenario is wrapping one component in another. &lt;code class=&quot;highlighter-rouge&quot;&gt;addhoc&lt;/code&gt; makes this simple as well.&lt;/p&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'react'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;addhoc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'addhoc'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyComponent&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./my-component'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Make the HOC function&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;withDiv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;addhoc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getWrappedComponent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;si&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getWrappedComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'WithDiv'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Wrap your component using the HOC&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyComponentWithDiv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;withDiv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MyComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Rendering a MyComponentWithDiv will render a div that wraps a MyComponent&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;example-3-react-16-context-consumer&quot;&gt;Example 3: React 16 Context consumer&lt;/h3&gt;

&lt;p&gt;With the &lt;a href=&quot;https://reactjs.org/docs/context.html&quot;&gt;React 16 Context API&lt;/a&gt;, consuming a context now requires wrapping components with a Context Consumer node. This
is a great use-case for HOCs as they free consumers of your context from having to deal with the Context directly.&lt;/p&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'react'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;addhoc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'addhoc'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyComponent&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./my-component'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Create the Context&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyContext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'DefaultValue'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Make the HOC function&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;withMyContext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;addhoc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getWrappedComponent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MyContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Consumer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;si&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getWrappedComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MyContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Consumer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'WithMyContext'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Wrap your component using the HOC&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyComponentWithMyContext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;withMyContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MyComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Now, the MyComponentWithMyContext automatically gets a prop called `value` that gets the context&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// value passed in from the context.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MyContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Provider&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'ProvidedValue'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MyComponentWithMyContext&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MyContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Provider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;example-4-passing-through-configuration&quot;&gt;Example 4: Passing through configuration&lt;/h3&gt;

&lt;p&gt;Sometimes, you want to set some values as part of assembling the HOC and have those available in your render function.
You can pass arbitrary parameters after the &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt; param to &lt;code class=&quot;highlighter-rouge&quot;&gt;addhoc&lt;/code&gt; and they’ll be passed through as additional
parameters to your render function:&lt;/p&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;addhoc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'addhoc'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyComponent&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./my-component'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Make the HOC function&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;withFooProp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;addhoc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getWrappedComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;extra&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getWrappedComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;extra&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;'WithFoo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'EXTRA'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Wrap your component using the HOC&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyComponentWithFoo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;withFooProp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MyComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Rendering a MyComponentWithFoo will get a `foo` prop with value `EXTRA`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;With &lt;code class=&quot;highlighter-rouge&quot;&gt;addhoc&lt;/code&gt;, making higher-order components is easy to do right. It manages the ugly parts for you, allowing you to do
what you do best.&lt;/p&gt;

&lt;p&gt;Give &lt;a href=&quot;https://github.com/godaddy/addhoc&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;addhoc&lt;/code&gt;&lt;/a&gt; a try the next time you need to build a HOC and let me know how it went. You can find me on Twitter
&lt;a href=&quot;https://twitter.com/decompiled&quot;&gt;@decompiled&lt;/a&gt; or in the &lt;a href=&quot;https://godaddy-oss-slack.herokuapp.com/&quot;&gt;GoDaddy OpenSource Slack channel&lt;/a&gt;. Have another use case? Contributions are always
welcome.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Cover photo by &lt;a href=&quot;https://unsplash.com/photos/JNR5_2Os5dE?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Reto Niederhauser&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/collections/4297606/hoc/65f7efa3c78a1bef80e683fce405e386?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Jonathan Keslin</name></author><summary type="html">As defined in the React documentation, a higher-order component, or HOC, is a function that returns a React component that wraps a specified child component and often provides augmented functionality. Implementing HOCs can be hard when considering hoisting statics, managing ref forwarding, and handling display name. addhoc is a newly released open-source package that aims to handle these challenges for you.</summary></entry><entry><title type="html">Dynamic Configuration for Node.js Applications</title><link href="http://localhost:4000/engineering/2019/03/06/dynamic-configuration-for-nodejs/" rel="alternate" type="text/html" title="Dynamic Configuration for Node.js Applications" /><published>2019-03-06T11:00:00-08:00</published><updated>2019-03-06T11:00:00-08:00</updated><id>http://localhost:4000/engineering/2019/03/06/dynamic-configuration-for-nodejs</id><content type="html" xml:base="http://localhost:4000/engineering/2019/03/06/dynamic-configuration-for-nodejs/">&lt;p&gt;Software systems that use dynamic configuration have the ability to change their configuration at runtime. The benefits of this pattern are vast and not altogether obvious. At GoDaddy, we use dynamic configuration in many of our Node.js applications to implement authorization, feature flags, and A/B tests, in addition to normal application configuration. Read on to learn more about dynamic configuration, its many benefits, and how we’ve implemented it at GoDaddy using an in-house open source library called &lt;a href=&quot;https://github.com/godaddy/node-flipr&quot;&gt;flipr&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;different-flavors-of-dynamic-configuration&quot;&gt;Different Flavors of Dynamic Configuration&lt;/h3&gt;

&lt;p&gt;Runtime configuration changes fall into two categories.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Application reads and uses new configuration data from an outside source&lt;/li&gt;
  &lt;li&gt;A catalyst changes the application’s existing configuration&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When the term dynamic configuration is thrown around it is often in reference to the first category. Reading configuration changes in real-time from an outside source is a useful behavior in software systems, especially in today’s distributed architectures. To achieve the true power of dynamic configuration, you must embrace the second category as well, which assumes that configuration data contains multiple values for a single data point. At runtime, the application calculates a single value from the multiple values, usually based on some outside entity that interacts with the system. A software system that handles both categories using dynamic configuration can achieve:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Complex authorization rules&lt;/li&gt;
  &lt;li&gt;Safe, incremental releases using feature flags&lt;/li&gt;
  &lt;li&gt;A/B tests&lt;/li&gt;
  &lt;li&gt;Service discovery&lt;/li&gt;
  &lt;li&gt;Dynamic routing&lt;/li&gt;
  &lt;li&gt;Custom user experiences&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And this is far from an exhaustive list. All of these software features boil down to configuration data that changes in response to some catalyst. Consider these three catalysts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Engineers:&lt;/strong&gt; An engineer modifies configuration in a data store and pushes the change to connected systems.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Environment:&lt;/strong&gt; An application’s runtime environment changes, resulting in a configuration change.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;End User&lt;/strong&gt;: The end user makes a request to an application and the configuration changes based on the end user’s characteristics.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now let’s re-phrase the behaviors mentioned in the previous section to show how dynamic configuration can solve them:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Authorization:&lt;/strong&gt; Authorization logic uses configuration data that changes based on end user characteristics&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Feature flags:&lt;/strong&gt; Features wrapped in logic uses configuration data that changes based on end user characteristics or engineers pushing updates&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;A/B tests:&lt;/strong&gt; Features and metrics wrapped in logic uses configuration data that changes based on end user characteristics&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Service discovery:&lt;/strong&gt; Service endpoints are read from configuration data that changes based on engineers pushing updates or changes in the environment&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Dynamic routing:&lt;/strong&gt; A reverse proxy uses configuration data that changes based on engineers pushing updates or changes in the environment&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Custom user experiences:&lt;/strong&gt; Different user experiences wrapped in logic use configuration data that changes based on end user characteristics&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Dynamic configuration provides a solid foundation for all of these features. Next we’ll introduce &lt;a href=&quot;https://github.com/godaddy/node-flipr&quot;&gt;flipr&lt;/a&gt; and provide examples of how GoDaddy uses it to solve various problems.&lt;/p&gt;

&lt;h3 id=&quot;dynamic-configuration-with-flipr&quot;&gt;Dynamic Configuration with Flipr&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/godaddy/node-flipr&quot;&gt;Flipr&lt;/a&gt; is a Node.js library for both static and dynamic configuration. It was created back in 2015 when we needed a way to create granular feature flags for one of our applications. At the time there weren’t any existing modules that met our requirements, so we opted to write our own. It’s been used in production since its release and has recently received an ES6 rewrite along with some new features.&lt;/p&gt;

&lt;p&gt;Flipr reads configuration data from a source and then exposes that data via a simple interface. Applications retrieve configuration individually by key or all at once. Applications can also define rules and pass input to flipr that make the configuration dynamic.&lt;/p&gt;

&lt;p&gt;Let’s start out with a simple static configuration to show off flipr’s components. We’ll use &lt;a href=&quot;https://github.com/godaddy/node-flipr-yaml&quot;&gt;flipr-yaml&lt;/a&gt; as the source, which reads configuration from yaml files that exist alongside application code and provides it to flipr.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Exists as a file at ./config.yaml&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# &quot;description&quot; is optional, but documenting your config is a good idea&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# use &quot;value&quot; for static configuration&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;databaseServer&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;This is the IP of the database server where the app stores its data.&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;127.0.0.1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Flipr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'flipr'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FliprYaml&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'flipr-yaml'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FliprYaml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;filePath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./config.yaml'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;flipr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Flipr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Assume that we're inside an async function and thus can use await&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;flipr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;databaseServer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 127.0.0.1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;All this code does is define a simple yaml config file, setup flipr to read it, and retrieve the value of the databaseServer config item. An important takeaway from this example is that retrieving configuration from flipr is always an asynchronous action. Even if the source is able to retrieve configuration data synchronously, the interface remains asynchronous for the sake of compatibility.&lt;/p&gt;

&lt;p&gt;Let’s look at a simple dynamic example. Remember that we described two types of dynamic configuration: retrieving new configuration and changing existing configuration. We’re going to focus on the latter for this example. Assume that we want to change the databaseServer our application uses depending on a user’s ID.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# use &quot;values&quot; for dynamic configuration&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;databaseServer&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;These are the IPs of the database servers where the app stores its data.&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;123&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;# this is a rule property&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;10.0.0.1&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;127.0.0.1&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# no rule property, this is the default value&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Flipr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'flipr'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FliprYaml&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'flipr-yaml'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rules&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'equal'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// rule type, determines how rule compares input to rule property.&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// the object-path of the input to evaluate, i.e. input.id (supports nesting)&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;property&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'userId'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// the name of the rule property in the config&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FliprYaml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;filePath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./config.yaml'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;flipr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Flipr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;userA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;userB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;456&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;flipr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;databaseServer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;userA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 10.0.0.1&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;flipr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;databaseServer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;userB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 127.0.0.1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is a contrived example, but it’s sufficient to show that flipr can return different config values by evaluating some input against a rule. The database server for userA is 10.0.0.1 because its &lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt; property equals the value defined in the config’s &lt;code class=&quot;highlighter-rouge&quot;&gt;userId&lt;/code&gt; rule property. Whereas userB is 127.0.0.1 because it doesn’t match any of the &lt;code class=&quot;highlighter-rouge&quot;&gt;userId&lt;/code&gt; values in the config and thus uses the default value.&lt;/p&gt;

&lt;h3 id=&quot;using-flipr-for-common-application-needs&quot;&gt;Using Flipr for Common Application Needs&lt;/h3&gt;

&lt;p&gt;Remember that applications can use dynamic configuration to implement many interesting behaviors. Let’s see that in action with flipr. The following examples exclude some of the boilerplate code to keep things concise.&lt;/p&gt;

&lt;h5 id=&quot;authorization&quot;&gt;Authorization&lt;/h5&gt;

&lt;p&gt;Authorization is usually a simple boolean decision: does an identity have access to do something, yes or no? Flipr allows you to declaratively define authorization points in your config and use rules to make those decisions.&lt;/p&gt;

&lt;p&gt;Assume that we have an application that allows users to post comments, but only allows moderators to delete comments. Moderators are users that have a userType of &lt;code class=&quot;highlighter-rouge&quot;&gt;2&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;canDeleteComments&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;isModerator&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rules&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'equal'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;userType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;property&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'isModerator'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;flipr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'canDeleteComments'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;deleteComment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;commentId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'You are not authorized to delete comments.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Alternatively, you could also implement the equal rule like this.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;canDeleteComments&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;userType&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;2&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rules&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'equal'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'userType'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;property&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'userType'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Rules and inputs are very flexible, it’s up to you to determine how best to define them. Just remember, as a rule of thumb, it’s generally better to define each authorization point in your configuration than to create a configuration item such as “isAdmin” and use that to make authorization decisions in your code.&lt;/p&gt;

&lt;h5 id=&quot;feature-flags&quot;&gt;Feature Flags&lt;/h5&gt;

&lt;p&gt;Feature flags are really just authorization decisions with a fancy name. Their purpose is to enable or disable features in your application. Using flipr, your feature flags can respond differently depending on the current user context. This is handy for rolling out features incrementally to a small set of users before opening the gates to everyone. You can also disable features entirely in certain environments, e.g. disable features in production until they’re finished so that code can continually be to pushed to master without impacting users.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;someNewFeature&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;locations&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;AZ&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;CA&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rules&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'list'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'location'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;property&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'locations'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;flipr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'someNewFeature'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;loadSomeNewFeature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here we’ve enabled some new feature for users in Arizona and California and disabled it for everyone else.&lt;/p&gt;

&lt;h5 id=&quot;ab-tests&quot;&gt;A/B Tests&lt;/h5&gt;

&lt;p&gt;At the risk of sounding like a broken record, A/B tests are really just feature flags with a fancy name. Their purpose is to enable different behaviors for different groups of users, record metrics based on how those users respond, and then compare the results. Flipr isn’t a complete A/B test tool by any means, but you can get pretty far with just a little extra code.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;purchasePathTest&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;testGroup&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;a&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;one-click&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;testGroup&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;b&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;new-checkout&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rules&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'equal'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// idToPercent creates a hash of the user id and the test id, then converts that to a percentage&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;idToPercent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'purchasePathTest'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'a'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;property&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'testGroup'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// metric logs would contain the user context, which would contain the abTests&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;abTests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;flipr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'purchasePathTest'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// display different UX based on test group&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;flipr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'purchasePathTest'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'one-click'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;renderOneClickPurchasePath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'new-checkout'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;renderNewCheckoutPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;renderCheckoutPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;service-discovery&quot;&gt;Service Discovery&lt;/h5&gt;

&lt;p&gt;Most of the examples thus far have relied on existing configuration changing its values based on some catalyst. Service discovery relies more on receiving and using new configuration data. To achieve this, you must use a flipr source that can automatically receive updates from an external data store. At one point flipr had an &lt;a href=&quot;https://coreos.com/etcd/&quot;&gt;etcd&lt;/a&gt; source that implemented this behavior, but we no longer maintain it. You can check out the code &lt;a href=&quot;https://github.com/godaddy/node-flipr-etcd&quot;&gt;here&lt;/a&gt; for inspiration, there’s not much to it (note: it’s targeting flipr’s v1 interface).&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;flipr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'someServiceUrl'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When flipr receives new configuration, &lt;code class=&quot;highlighter-rouge&quot;&gt;someServiceUrl&lt;/code&gt; changes, and the code above starts directing traffic to a new endpoint.&lt;/p&gt;

&lt;h5 id=&quot;other-uses&quot;&gt;Other Uses&lt;/h5&gt;

&lt;p&gt;Dynamic configuration is a good choice for any application that would benefit from defining logical decisions external to itself. Whether that configuration should exist alongside your application code in separate files, or in some external data source depends on your use case. When looking for places to implement dynamic configuration, try asking yourself:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Would I benefit from having this logic maintained and documented in a centralized location?&lt;/li&gt;
  &lt;li&gt;Would I benefit from being able to change this logic without re-deploying my application?&lt;/li&gt;
  &lt;li&gt;Would I benefit from being able to change this logic based on the current context or the runtime environment?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;flipr-best-practices&quot;&gt;Flipr Best Practices&lt;/h3&gt;

&lt;p&gt;Flipr’s flexibility can act against you if used incorrectly. Here are some best practices we use at GoDaddy to keep our code and configuration maintainable.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;One instance of flipr per source per process. This takes full advantage of flipr’s internal caching.&lt;/li&gt;
  &lt;li&gt;Prefer configuration files to exist alongside application code and validate configuration in unit tests.
    &lt;ul&gt;
      &lt;li&gt;This depends a lot on your CICD pipeline and deployment strategy. If you are able to quickly build, test, and deploy your application, having the configuration files coupled to the application code gives you built in auditing, versioning, and easy rollback thanks to source control. However, if your CICD pipeline is slow, or you need config changes to immediately propagate to live applications, then you’ll want your configuration data to exist in a source capable of live updates, e.g. &lt;a href=&quot;https://coreos.com/etcd/&quot;&gt;etcd&lt;/a&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Create separate configuration files by environment and purpose, e.g. dev/test/prod and feature flags/authorization/ab tests.&lt;/li&gt;
  &lt;li&gt;Document your configuration. Flipr’s schema is metadata friendly.&lt;/li&gt;
  &lt;li&gt;Clean up stale configuration. This is especially important with feature flags, which tend to go stale quickly.
    &lt;ul&gt;
      &lt;li&gt;Tip: Use “sunset tests”, which are unit tests that fail after a certain date if some targeted configuration still exists.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;related-resources&quot;&gt;Related Resources&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.twitter.com/engineering/en_us/topics/infrastructure/2018/dynamic-configuration-at-twitter.html&quot;&gt;Dynamic configuration at Twitter&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/godaddy/node-flipr&quot;&gt;flipr&lt;/a&gt;, &lt;a href=&quot;https://github.com/godaddy/node-flipr-yaml&quot;&gt;flipr-yaml&lt;/a&gt;, &lt;a href=&quot;https://github.com/godaddy/node-flipr-validation&quot;&gt;flipr-validation&lt;/a&gt;, &lt;a href=&quot;https://github.com/godaddy/node-flipr-etcd&quot;&gt;flipr-etcd&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Grant Shively</name></author><summary type="html">Dynamic configuration is a powerful tool for software applications. Use it to solve problems like authorization, feature flags, and A/B tests, in addition to normal application configuration. See how GoDaddy uses a library called flipr to achieve this for some of its Node.js applications.</summary></entry><entry><title type="html">Connecting an On-Premises Data Center to AWS with HA Software VPN Tunnels</title><link href="http://localhost:4000/engineering/2019/02/26/software-vpn-channel/" rel="alternate" type="text/html" title="Connecting an On-Premises Data Center to AWS with HA Software VPN Tunnels" /><published>2019-02-26T09:00:00-08:00</published><updated>2019-02-26T09:00:00-08:00</updated><id>http://localhost:4000/engineering/2019/02/26/software-vpn-channel</id><content type="html" xml:base="http://localhost:4000/engineering/2019/02/26/software-vpn-channel/">&lt;p&gt;According to &lt;a href=&quot;https://www.rightscale.com/blog/cloud-industry-insights/cloud-computing-trends-2018-state-cloud-survey&quot;&gt;the latest annual State of the Cloud Survey&lt;/a&gt; conducted by RightScale, about 51 percent of enterprises are using a hybrid cloud strategy. When an enterprise starts to adopt a hybrid cloud strategy, a common issue that arises is how to build a secured connection between the public cloud and On-Premises data centers. When our team started to migrate our services to Amazon cloud, we were facing the same issue of connecting our services from AWS back to our On-Premises data center. In this blog, we describe how we solved this issue and built high-availability software VPN tunnels between AWS and our On-Premises Data Center. We also open sourced our &lt;a href=&quot;https://github.com/keweilu/ha-openvpn-tunnel&quot;&gt;ha-openvpn-tunnel&lt;/a&gt; project on GitHub which uses terraform to deploy high-availability OpenVPN tunnels.&lt;/p&gt;

&lt;p&gt;In general, there are two ways to build the connection: &lt;a href=&quot;https://docs.aws.amazon.com/directconnect/latest/UserGuide/Welcome.html&quot;&gt;AWS direct connect&lt;/a&gt; and VPN tunnels. AWS direct connect allows you to directly connect your internal network to one of the AWS direct connect locations. Direct connect uses a standard 1-gigabit or 10-gigabit ethernet fiber-optic cable to connect your local router to an AWS direct connect router. Direct connect is more secure and can provide better performance over other VPN options.  As my team was one of the early adopters we moved our services to AWS prior to GoDaddy’s direct connect being set up.  This allows GoDaddy to get experience developing and operating on AWS while a more formalized on boarding process was developed that offered a direct connect, details &lt;a href=&quot;https://www.youtube.com/watch?v=wskODdCBvYc&amp;amp;feature=youtu.be&quot;&gt;here&lt;/a&gt;.  Our team has now been onboarded via this process using GoDaddy’s direct connect, however we wanted to share our experience of building and running a &lt;a href=&quot;https://github.com/keweilu/ha-openvpn-tunnel&quot;&gt;ha-openvpn-tunnel&lt;/a&gt; as it is a solid solution for those that are in the same position we were or don’t have a direct connect.&lt;/p&gt;

&lt;h2 id=&quot;high-level-architecture-design&quot;&gt;High Level Architecture Design&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/engineering/assets/images/ha-openvpn/openvpn-arch.png&quot; alt=&quot;OpenVPN High-Level Architecture&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To configure a high-availability OpenVPN server on AWS, we used the Active-Passive HA configuration. We set up two OpenVPN servers, one primary and one secondary. We ran them simultaneously on two container instances/EC2 instances in the ECS cluster. Each container instance belonged to an auto-scaling group with a desired count 1. For each auto-scaling group, there was a dedicated auto-scaling launch configuration associated with it. In the launch configuration, we copied the OpenVPN server certs from an S3 bucket to the instance. Also, we assigned an Elastic IP to the container instance to make sure its IP address is persistent after reboot. Then, we connected each OpenVPN Server to an OpenVPN client set up on a GoDaddy VM. This gave us two OpenVPN tunnels.&lt;/p&gt;

&lt;p&gt;To facilitate the OpenVPN server and client setup, we also created server and client side docker images. We pushed the images to the docker registry. Then, we could set up the server or client by pulling and running the docker images.&lt;/p&gt;

&lt;p&gt;During any time, only one OpenVPN server (Primary OpenVPN Server) is actively being used. All traffic from AWS to the On-Premises data centers will go through that OpenVPN server. We have a CloudWatch rule defined for AWS ECS task state change event. Based on the event received, the rule will trigger a lambda function to update the route table and promote the secondary server as the primary server if the primary OpenVPN server is down. The figure below shows one such event.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/engineering/assets/images/ha-openvpn/openvpn-route.png&quot; alt=&quot;Route Table Update Event&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;auto-recovery-and-monitor&quot;&gt;Auto-Recovery and Monitor&lt;/h2&gt;

&lt;p&gt;In the current setup, on the server side, we use AWS auto-scaling with desired count 1. In case of failure on the server side, e.g. the container instance stopped, it will auto recover from failure. On the client side, we do not have any auto recovery scheme and it needs a manual fix in the event of failure. One thing to note here is that we have the primary and secondary tunnels. If the primary tunnel has a problem due to the client failure, we could update the route table to use the secondary tunnel. Then, the on-call engineers can take the time to inspect the OpenVPN client failure without pressure.&lt;/p&gt;

&lt;p&gt;Then, we would need monitors to help us to discover any OpenVPN connection failure as soon as it happens. To do this, there is a cron job running on each ECS container instance. It pings one of our internal services at GoDaddy, and then it publishes the status metric to CloudWatch.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/engineering/assets/images/ha-openvpn/openvpn-Status.png&quot; alt=&quot;OpenVPN Status&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We configured a CloudWatch alarm for each OpenVPN status metric. Once the alarm is triggered, it will send alerts to our slack channel and on-call engineers can take actions to inspect:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/engineering/assets/images/ha-openvpn/openvpn-alarm.png&quot; alt=&quot;OpenVPN Alarms&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;We hope the blog post gives you a high-level idea of our HA solution to build VPN tunnels between your On-Premises data center and public cloud. You can check out our &lt;a href=&quot;https://github.com/keweilu/ha-openvpn-tunnel&quot;&gt;ha-openvpn-tunnel&lt;/a&gt; project on GitHub, it includes terraform scripts so you can deploy and use it with a few commands.&lt;/p&gt;

&lt;p&gt;Photo credit: &lt;a href=&quot;https://www.flickr.com/photos/strocchi/44643371845/in/photolist-2b1YX6F-agRBhu-dTC4mM-4sBZoN-WdNarj-4An7ZH-WBskt6-Xg4L1z-7TZupu-2bey7j8-agNQ7p-mXnr5-vVvXe-4GLRB-4f7AHH-3pDsd-k1nH-mDNJcB-Ck4Wu-bnhy4X-YQkYNY-bXqJed-n2GyD-8cidDf-9GLeA4-7XecqJ-p5UNPD-4CmFaP-2RRKM-3Qkiu-6kvCnd-2eyyX-o9nKxC-C7gZ-4DddUh-kjzk-unXV-23uNbN-prWEje-2FFegW-8XmxC-7QTthc-4NnYxH-8cVYDQ-qdV5-UkARf-51BWBJ-foNv1M-unXM-rc1a&quot;&gt;Tunnel&lt;/a&gt; by &lt;a href=&quot;https://www.flickr.com/photos/strocchi/&quot;&gt;Enrico Strocchi&lt;/a&gt; on &lt;a href=&quot;https://www.flickr.com/photos&quot;&gt;Flickr&lt;/a&gt;&lt;/p&gt;</content><author><name>Kewei Lu</name></author><summary type="html">When our team started to deploy our services to Amazon cloud, there was a demand to connect from Amazon VPC back to our On-Premises data center. This post describes how we build HA software VPN tunnels.</summary></entry><entry><title type="html">Interfaces and Metaclasses in Python</title><link href="http://localhost:4000/engineering/2018/12/20/python-metaclasses/" rel="alternate" type="text/html" title="Interfaces and Metaclasses in Python" /><published>2018-12-20T12:00:00-08:00</published><updated>2018-12-20T12:00:00-08:00</updated><id>http://localhost:4000/engineering/2018/12/20/python-metaclasses</id><content type="html" xml:base="http://localhost:4000/engineering/2018/12/20/python-metaclasses/">&lt;p&gt;&lt;em&gt;Note: All code in this post is assumed to be for Python 3. There are subtle differences in the way classes are handled between Python 2 and 3 (see &lt;a href=&quot;https://www.python.org/doc/newstyle/&quot;&gt;here&lt;/a&gt;).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Have you ever heard of &lt;em&gt;metaclasses&lt;/em&gt; in Python? I hadn’t until recently, and I had been using them for months without
actually knowing how they work. Python’s metaclass functionality is one of those language features you’ll probably never
need to know about, much less mess with, but it offers some keen insight into Python’s OOP model, and is actually quite powerful.&lt;/p&gt;

&lt;p&gt;I discovered metaclasses after encountering a pretty common problem. One of our repos contains a class that pulls a bunch of data
over the network, and generally takes a pretty long time to run. As it turned out, we didn’t want to spend all this time gathering data
every time we ran the service, so we decided to create a dummy class that we could swap in for the real one. In order for everything
to continue working, both classes needed to expose identical looking functions. Instead of relying on Python’s &lt;a href=&quot;http://www.voidspace.org.uk/python/articles/duck_typing.shtml&quot;&gt;duck typing&lt;/a&gt;, this sounded
like a great place to define an interface that both classes could inherit from, to ensure the callers that nothing would break regardless of
which class was being used. Unfortunately, Python doesn’t &lt;em&gt;have&lt;/em&gt; interfaces, or at least, not quite built into the language.&lt;/p&gt;

&lt;p&gt;Enter Python’s &lt;a href=&quot;https://docs.python.org/3/library/abc.html&quot;&gt;abstract base class&lt;/a&gt;, or, cutely, &lt;em&gt;ABC&lt;/em&gt;. Functionally, abstract base classes
let you define a class with &lt;em&gt;abstract methods&lt;/em&gt;, which all subclasses &lt;em&gt;must&lt;/em&gt; implement in order to be initialized. ABCs are extremely simple
to use, and do exactly what they say on the tin. Here’s how you might solve a simplified version of the problem from above using ABCs in Python 3.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;abc&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ABC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;abstractmethod&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NetworkInterface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ABC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@abstractmethod&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@abstractmethod&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;transfer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RealNetwork&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NetworkInterface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# connect to something for real&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;transfer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# transfer a bunch of data&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FakeNetwork&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NetworkInterface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# don't actually connect to anything!&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;transfer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# don't transfer anything!&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Our actual abstract base class that defines the interface our classes inherit from is &lt;code class=&quot;highlighter-rouge&quot;&gt;NetworkInterface&lt;/code&gt;, which itself inherits from &lt;code class=&quot;highlighter-rouge&quot;&gt;ABC&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;abstractmethod&lt;/code&gt; is just a &lt;a href=&quot;https://realpython.com/primer-on-python-decorators/&quot;&gt;decorator&lt;/a&gt; which marks methods as, well, abstract – subclasses have to implement them. This is all fine, but what has this really gotten us? Let’s get rid of &lt;code class=&quot;highlighter-rouge&quot;&gt;transfer&lt;/code&gt; from &lt;code class=&quot;highlighter-rouge&quot;&gt;FakeNetwork&lt;/code&gt; and find out.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FakeNetwork&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NetworkInterface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# don't actually connect to anything!&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FakeNetwork&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Whoops! We get an error: &lt;code class=&quot;highlighter-rouge&quot;&gt;TypeError: Can't instantiate abstract class FakeNetwork with abstract methods transfer&lt;/code&gt; – that’s the abstract base class enforcing the interface. As long as &lt;code class=&quot;highlighter-rouge&quot;&gt;FakeNetwork&lt;/code&gt; is missing &lt;code class=&quot;highlighter-rouge&quot;&gt;transfer&lt;/code&gt;, we can’t create an instance of it. Neat.&lt;/p&gt;

&lt;p&gt;This worked well for our use case, but I was left a bit dissatisfied. How does it all work? In reality, all the magic is happening through the use of metaclasses, but Python sneakily hides that from us by having us inherit from &lt;code class=&quot;highlighter-rouge&quot;&gt;ABC&lt;/code&gt;, just a normal class inheritence. &lt;code class=&quot;highlighter-rouge&quot;&gt;ABC&lt;/code&gt; however, is actually a totally empty class! All it does is set its &lt;em&gt;metaclass&lt;/em&gt; to be &lt;code class=&quot;highlighter-rouge&quot;&gt;ABCMeta&lt;/code&gt;, which is where all the work gets done.&lt;/p&gt;

&lt;h3 id=&quot;metaclasses&quot;&gt;Metaclasses&lt;/h3&gt;

&lt;p&gt;So what’s the deal with this metaclass stuff? As you may have heard, everything in Python is an object. Really, &lt;em&gt;everything&lt;/em&gt;. Say we have the following&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;All objects have types, and since everything is an object, everything has a type. If we call &lt;code class=&quot;highlighter-rouge&quot;&gt;type(bar)&lt;/code&gt;, we see that &lt;code class=&quot;highlighter-rouge&quot;&gt;bar&lt;/code&gt; has type &lt;code class=&quot;highlighter-rouge&quot;&gt;Foo&lt;/code&gt;, as we might expect. What about &lt;code class=&quot;highlighter-rouge&quot;&gt;type(Foo)&lt;/code&gt; then? We get &lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt;! The type of the class &lt;code class=&quot;highlighter-rouge&quot;&gt;Foo&lt;/code&gt; itself (as opposed to an &lt;em&gt;instance&lt;/em&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;Foo&lt;/code&gt;) is &lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt; is our first real example of a metaclass. All classes in Python 3 are instances of the metaclass &lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt;. In the same way that you call a class to initialize an object, you call a &lt;em&gt;metaclass&lt;/em&gt; to initialize a class. Typically, this means that when the interpreter sees a class definition, it calls &lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt; to create the class, allowing us to call it to create instances later on.&lt;/p&gt;

&lt;p&gt;This means that &lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt; can do more than just tell us the type of stuff. When called with the correct arguments, &lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt; can be used to programmatically &lt;em&gt;create classes&lt;/em&gt;. Observe.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Foo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'__init__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# returns 10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The first argument to &lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt; is the desired name of the created class, followed by a list of classes to inherit from. The last argument defines the namespace of the class, or what will become its &lt;code class=&quot;highlighter-rouge&quot;&gt;__dict__&lt;/code&gt; attribute – this is the place to define methods, etc. Used this way, ‘type’ lets us define classes dynamically. Understanding how &lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt; works under the hood is important in understanding how class definition works, and how we can customize and extend this process.&lt;/p&gt;

&lt;p&gt;Recall that all Python classes are instances of &lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt;. In the first &lt;code class=&quot;highlighter-rouge&quot;&gt;Foo&lt;/code&gt; example above, when the interpreter sees the &lt;code class=&quot;highlighter-rouge&quot;&gt;Foo&lt;/code&gt; class definition, it creates a &lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt; object named &lt;code class=&quot;highlighter-rouge&quot;&gt;Foo&lt;/code&gt; in the enclosing namespace. To do this, it calls &lt;code class=&quot;highlighter-rouge&quot;&gt;type.__new__&lt;/code&gt; (just as &lt;code class=&quot;highlighter-rouge&quot;&gt;__new__&lt;/code&gt; is called for regular old classes) which creates and returns the &lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt; object named &lt;code class=&quot;highlighter-rouge&quot;&gt;Foo&lt;/code&gt;. The interpreter then calls &lt;code class=&quot;highlighter-rouge&quot;&gt;type.__init__&lt;/code&gt;, using the &lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt; instance returned from &lt;code class=&quot;highlighter-rouge&quot;&gt;type.__new__&lt;/code&gt; as the first argument (“&lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt;”). This is the typical way class instances are created as well (e.g., &lt;code class=&quot;highlighter-rouge&quot;&gt;x = Foo()&lt;/code&gt;). The difference here is that the &lt;code class=&quot;highlighter-rouge&quot;&gt;__new__&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;__init__&lt;/code&gt; methods of the metaclass are executed before we ever create an instance of the class itself, and can be used to augment or otherwise change the behavior of the overall class. While we can’t modify the behavior of &lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt; directly, by subclassing &lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt;, we can override the &lt;code class=&quot;highlighter-rouge&quot;&gt;__new__&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;__init__&lt;/code&gt; methods to define custom behavior.&lt;/p&gt;

&lt;h3 id=&quot;writing-our-own-abc&quot;&gt;Writing our own ABC&lt;/h3&gt;
&lt;p&gt;This all may be a bit hard to grok, but it should hopefully become clearer when made more concrete. Let’s see if we can put this to use by trying to implement a basic version of abstract base classes ourselves, using metaclasses. Metaclasses are the perfect way to solve this problem, since they allow us to run code at the time of class definition. This lets us potentially raise an error if the class definition is incorrect, before we ever get the chance to create an instance of the class. I tend to think of this as somewhat similar to static checking in compiled languages.&lt;/p&gt;

&lt;p&gt;For this example, let’s just focus on forcing classes to implement any methods marked as “abstract” in the class hierarchy. Our version of an interface will be a bit stronger than Python’s ABC, in that it won’t allow us to even &lt;em&gt;define&lt;/em&gt; a class that fails to implement all necessary methods, let alone &lt;em&gt;initialize&lt;/em&gt; an instance of one.  Using our &lt;code class=&quot;highlighter-rouge&quot;&gt;NetworkInterface&lt;/code&gt; example from earlier, let’s first figure out a way to mark methods as “abstract”. Decorators are a cheap way to do this:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;abstractfunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__isabstract__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With our decorator in place, let’s fill in some boilerplate. We’ll want to define a custom metaclass, with dummy methods &lt;code class=&quot;highlighter-rouge&quot;&gt;__init__&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;__new__&lt;/code&gt;, and have our desired abstract base class inherit from it. Note that the name &lt;code class=&quot;highlighter-rouge&quot;&gt;Interface&lt;/code&gt; for our metaclass below has nothing to do with the “Interface” in our &lt;code class=&quot;highlighter-rouge&quot;&gt;NetworkInterface&lt;/code&gt; class – we could’ve named &lt;code class=&quot;highlighter-rouge&quot;&gt;Interface&lt;/code&gt; anything we want.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bases&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__new__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;metaclass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bases&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NetworkInterface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;metaclass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@abstractfunc&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@abstractfunc&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;transfer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, on class definition, both &lt;code class=&quot;highlighter-rouge&quot;&gt;NetworkInterface&lt;/code&gt; and anything that inherits it will run &lt;code class=&quot;highlighter-rouge&quot;&gt;Interface.__new__&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Interface.__init__&lt;/code&gt;. For any class with metaclass &lt;code class=&quot;highlighter-rouge&quot;&gt;Interface&lt;/code&gt;, we want Python to raise an exception if the class doesn’t implement all methods marked as abstract in its parent classes. For bookkeeping purposes, let’s augment every class that inherits from &lt;code class=&quot;highlighter-rouge&quot;&gt;Interface&lt;/code&gt; with two attributes: a list of all its methods, and a list of just its abstract methods. We can do this in &lt;code class=&quot;highlighter-rouge&quot;&gt;__new__&lt;/code&gt;, by augmenting the class namespace before the class is even created.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bases&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__new__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;metaclass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bases&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'abstract_methods'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Interface&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_get_abstract_methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'all_methods'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Interface&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_get_all_methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__new__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;metaclass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bases&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_get_abstract_methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;callable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;getattr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'__isabstract__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_get_all_methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;callable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Our two helper methods just iterate over the objects in the class’ namespace and append the object names to a list if the appropriate conditions apply. We add these lists to the class’ namespace in &lt;code class=&quot;highlighter-rouge&quot;&gt;__new__&lt;/code&gt;, which we can then refer to in &lt;code class=&quot;highlighter-rouge&quot;&gt;__init__&lt;/code&gt; later on. Since &lt;code class=&quot;highlighter-rouge&quot;&gt;Interface.__new__&lt;/code&gt; is called for any class that inherits from &lt;code class=&quot;highlighter-rouge&quot;&gt;Interface&lt;/code&gt;, we’re guaranteed that all such classes will have the &lt;code class=&quot;highlighter-rouge&quot;&gt;abstract_methods&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;all_methods&lt;/code&gt; attributes. This means that in &lt;code class=&quot;highlighter-rouge&quot;&gt;Interface.__init__&lt;/code&gt;, we can iterate over all the abstract methods of the parent class, and make sure that a method with the same name exists in the list of all methods for the &lt;em&gt;current&lt;/em&gt; class, the one that’s currently being initialized. If we &lt;em&gt;don’t&lt;/em&gt; find a method in the class with the same name as an abstract method from the parent, we raise an exception. This easily extends to cases of multiple inheritance, by repeating this process for each base class present in &lt;code class=&quot;highlighter-rouge&quot;&gt;bases&lt;/code&gt;. Putting everything together, we end up with something like this:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;abstractfunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__isabstract__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bases&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bases&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;must_implement&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;getattr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'abstract_methods'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;class_methods&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;getattr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'all_methods'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;must_implement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;class_methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;err_str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;Can't create abstract class {name}!
                    {name} must implement abstract method {method} of class {base_class}!&quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;base_class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;TypeError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err_str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__new__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;metaclass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bases&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'abstract_methods'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Interface&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_get_abstract_methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'all_methods'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Interface&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_get_all_methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__new__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;metaclass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bases&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_get_abstract_methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;callable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;getattr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'__isabstract__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_get_all_methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;callable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NetworkInterface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;metaclass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@abstractfunc&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@abstractfunc&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;transfer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And that should do it! Now, let’s see what happens when we try to subclass &lt;code class=&quot;highlighter-rouge&quot;&gt;NetworkInterface&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RealNetwork&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NetworkInterface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;transfer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Absolutely nothing! Just as we should expect. Since &lt;code class=&quot;highlighter-rouge&quot;&gt;RealNetwork&lt;/code&gt; implements all the abstract methods of its parent(s), the class gets defined without a hitch. What’s probably more important to us however, is when our class &lt;em&gt;doesn’t&lt;/em&gt; adhere to the contract of the base class.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FakeNetwork&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NetworkInterface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;connect_to_server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;transfer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Uh oh – &lt;code class=&quot;highlighter-rouge&quot;&gt;TypeError: Can't create abstract class FakeNetwork! FakeNetwork must implement abstract method connect of class NetworkInterface!&lt;/code&gt;. In this case, the exception is a good thing. Since &lt;code class=&quot;highlighter-rouge&quot;&gt;FakeNetwork&lt;/code&gt; doesn’t actually implement a method named &lt;code class=&quot;highlighter-rouge&quot;&gt;connect&lt;/code&gt;, an exception is raised before we ever get the chance to create an instance of the class.&lt;/p&gt;

&lt;p&gt;Ultimately, this is a pretty brittle and toy-like implementation of abstract base classes, but hopefully it serves as a good example of how Python metaclasses can be uniquely used to solve problems. Metaclasses are definitely one of the more obscure language features of Python, and often misunderstood. To be fair, there aren’t a lot of situations where a problem is most easily or appropriately solvable by using custom metaclasses, but there are occasionally times, like with abstract classes, where the merit of using metaclasses presents itself. If you weren’t already familiar with metaclasses, however, hopefully you now have another tool at your disposal when tackling particularly tricky problems in Python.&lt;/p&gt;</content><author><name>Joseph Bergeron</name></author><summary type="html">Python's metaclasses are an obscure and often misunderstood feature of the language. This post introduces readers to metaclasses hands-on by implementing interfaces, motivated by Python's abstract base class, or ABC.</summary></entry></feed>